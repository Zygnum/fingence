/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.History;
import com.fingence.slayer.model.HistoryModel;
import com.fingence.slayer.model.HistorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the History service. Represents a row in the &quot;fing_History&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.HistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistoryImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see HistoryImpl
 * @see com.fingence.slayer.model.History
 * @see com.fingence.slayer.model.HistoryModel
 * @generated
 */
@JSON(strict = true)
public class HistoryModelImpl extends BaseModelImpl<History>
	implements HistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a history model instance should use the {@link com.fingence.slayer.model.History} interface instead.
	 */
	public static final String TABLE_NAME = "fing_History";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recId", Types.BIGINT },
			{ "assetId", Types.BIGINT },
			{ "logDate", Types.TIMESTAMP },
			{ "value", Types.DOUBLE },
			{ "type_", Types.INTEGER },
			{ "principal", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_History (recId LONG not null primary key,assetId LONG,logDate DATE null,value DOUBLE,type_ INTEGER,principal DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table fing_History";
	public static final String ORDER_BY_JPQL = " ORDER BY history.recId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_History.recId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.History"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.History"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fingence.slayer.model.History"),
			true);
	public static long ASSETID_COLUMN_BITMASK = 1L;
	public static long LOGDATE_COLUMN_BITMASK = 2L;
	public static long TYPE_COLUMN_BITMASK = 4L;
	public static long RECID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static History toModel(HistorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		History model = new HistoryImpl();

		model.setRecId(soapModel.getRecId());
		model.setAssetId(soapModel.getAssetId());
		model.setLogDate(soapModel.getLogDate());
		model.setValue(soapModel.getValue());
		model.setType(soapModel.getType());
		model.setPrincipal(soapModel.getPrincipal());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<History> toModels(HistorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<History> models = new ArrayList<History>(soapModels.length);

		for (HistorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.History"));

	public HistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return History.class;
	}

	@Override
	public String getModelClassName() {
		return History.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recId", getRecId());
		attributes.put("assetId", getAssetId());
		attributes.put("logDate", getLogDate());
		attributes.put("value", getValue());
		attributes.put("type", getType());
		attributes.put("principal", getPrincipal());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long recId = (Long)attributes.get("recId");

		if (recId != null) {
			setRecId(recId);
		}

		Long assetId = (Long)attributes.get("assetId");

		if (assetId != null) {
			setAssetId(assetId);
		}

		Date logDate = (Date)attributes.get("logDate");

		if (logDate != null) {
			setLogDate(logDate);
		}

		Double value = (Double)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Double principal = (Double)attributes.get("principal");

		if (principal != null) {
			setPrincipal(principal);
		}
	}

	@JSON
	@Override
	public long getRecId() {
		return _recId;
	}

	@Override
	public void setRecId(long recId) {
		_recId = recId;
	}

	@JSON
	@Override
	public long getAssetId() {
		return _assetId;
	}

	@Override
	public void setAssetId(long assetId) {
		_columnBitmask |= ASSETID_COLUMN_BITMASK;

		if (!_setOriginalAssetId) {
			_setOriginalAssetId = true;

			_originalAssetId = _assetId;
		}

		_assetId = assetId;
	}

	public long getOriginalAssetId() {
		return _originalAssetId;
	}

	@JSON
	@Override
	public Date getLogDate() {
		return _logDate;
	}

	@Override
	public void setLogDate(Date logDate) {
		_columnBitmask |= LOGDATE_COLUMN_BITMASK;

		if (_originalLogDate == null) {
			_originalLogDate = _logDate;
		}

		_logDate = logDate;
	}

	public Date getOriginalLogDate() {
		return _originalLogDate;
	}

	@JSON
	@Override
	public double getValue() {
		return _value;
	}

	@Override
	public void setValue(double value) {
		_value = value;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	@JSON
	@Override
	public double getPrincipal() {
		return _principal;
	}

	@Override
	public void setPrincipal(double principal) {
		_principal = principal;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			History.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public History toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (History)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HistoryImpl historyImpl = new HistoryImpl();

		historyImpl.setRecId(getRecId());
		historyImpl.setAssetId(getAssetId());
		historyImpl.setLogDate(getLogDate());
		historyImpl.setValue(getValue());
		historyImpl.setType(getType());
		historyImpl.setPrincipal(getPrincipal());

		historyImpl.resetOriginalValues();

		return historyImpl;
	}

	@Override
	public int compareTo(History history) {
		long primaryKey = history.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof History)) {
			return false;
		}

		History history = (History)obj;

		long primaryKey = history.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		HistoryModelImpl historyModelImpl = this;

		historyModelImpl._originalAssetId = historyModelImpl._assetId;

		historyModelImpl._setOriginalAssetId = false;

		historyModelImpl._originalLogDate = historyModelImpl._logDate;

		historyModelImpl._originalType = historyModelImpl._type;

		historyModelImpl._setOriginalType = false;

		historyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<History> toCacheModel() {
		HistoryCacheModel historyCacheModel = new HistoryCacheModel();

		historyCacheModel.recId = getRecId();

		historyCacheModel.assetId = getAssetId();

		Date logDate = getLogDate();

		if (logDate != null) {
			historyCacheModel.logDate = logDate.getTime();
		}
		else {
			historyCacheModel.logDate = Long.MIN_VALUE;
		}

		historyCacheModel.value = getValue();

		historyCacheModel.type = getType();

		historyCacheModel.principal = getPrincipal();

		return historyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{recId=");
		sb.append(getRecId());
		sb.append(", assetId=");
		sb.append(getAssetId());
		sb.append(", logDate=");
		sb.append(getLogDate());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", principal=");
		sb.append(getPrincipal());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.History");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recId</column-name><column-value><![CDATA[");
		sb.append(getRecId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetId</column-name><column-value><![CDATA[");
		sb.append(getAssetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logDate</column-name><column-value><![CDATA[");
		sb.append(getLogDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>principal</column-name><column-value><![CDATA[");
		sb.append(getPrincipal());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = History.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			History.class
		};
	private long _recId;
	private long _assetId;
	private long _originalAssetId;
	private boolean _setOriginalAssetId;
	private Date _logDate;
	private Date _originalLogDate;
	private double _value;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private double _principal;
	private long _columnBitmask;
	private History _escapedModel;
}