/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.Dividend;
import com.fingence.slayer.model.DividendModel;
import com.fingence.slayer.model.DividendSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Dividend service. Represents a row in the &quot;fing_Dividend&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.DividendModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DividendImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see DividendImpl
 * @see com.fingence.slayer.model.Dividend
 * @see com.fingence.slayer.model.DividendModel
 * @generated
 */
@JSON(strict = true)
public class DividendModelImpl extends BaseModelImpl<Dividend>
	implements DividendModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dividend model instance should use the {@link com.fingence.slayer.model.Dividend} interface instead.
	 */
	public static final String TABLE_NAME = "fing_Dividend";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recId", Types.BIGINT },
			{ "assetId", Types.BIGINT },
			{ "declaredDate", Types.TIMESTAMP },
			{ "exDate", Types.TIMESTAMP },
			{ "recordDate", Types.TIMESTAMP },
			{ "payableDate", Types.TIMESTAMP },
			{ "amount", Types.DOUBLE },
			{ "frequency", Types.VARCHAR },
			{ "type_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_Dividend (recId LONG not null primary key,assetId LONG,declaredDate DATE null,exDate DATE null,recordDate DATE null,payableDate DATE null,amount DOUBLE,frequency VARCHAR(75) null,type_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table fing_Dividend";
	public static final String ORDER_BY_JPQL = " ORDER BY dividend.recId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_Dividend.recId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.Dividend"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.Dividend"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fingence.slayer.model.Dividend"),
			true);
	public static long ASSETID_COLUMN_BITMASK = 1L;
	public static long DECLAREDDATE_COLUMN_BITMASK = 2L;
	public static long RECID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Dividend toModel(DividendSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Dividend model = new DividendImpl();

		model.setRecId(soapModel.getRecId());
		model.setAssetId(soapModel.getAssetId());
		model.setDeclaredDate(soapModel.getDeclaredDate());
		model.setExDate(soapModel.getExDate());
		model.setRecordDate(soapModel.getRecordDate());
		model.setPayableDate(soapModel.getPayableDate());
		model.setAmount(soapModel.getAmount());
		model.setFrequency(soapModel.getFrequency());
		model.setType(soapModel.getType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Dividend> toModels(DividendSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Dividend> models = new ArrayList<Dividend>(soapModels.length);

		for (DividendSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.Dividend"));

	public DividendModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Dividend.class;
	}

	@Override
	public String getModelClassName() {
		return Dividend.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recId", getRecId());
		attributes.put("assetId", getAssetId());
		attributes.put("declaredDate", getDeclaredDate());
		attributes.put("exDate", getExDate());
		attributes.put("recordDate", getRecordDate());
		attributes.put("payableDate", getPayableDate());
		attributes.put("amount", getAmount());
		attributes.put("frequency", getFrequency());
		attributes.put("type", getType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long recId = (Long)attributes.get("recId");

		if (recId != null) {
			setRecId(recId);
		}

		Long assetId = (Long)attributes.get("assetId");

		if (assetId != null) {
			setAssetId(assetId);
		}

		Date declaredDate = (Date)attributes.get("declaredDate");

		if (declaredDate != null) {
			setDeclaredDate(declaredDate);
		}

		Date exDate = (Date)attributes.get("exDate");

		if (exDate != null) {
			setExDate(exDate);
		}

		Date recordDate = (Date)attributes.get("recordDate");

		if (recordDate != null) {
			setRecordDate(recordDate);
		}

		Date payableDate = (Date)attributes.get("payableDate");

		if (payableDate != null) {
			setPayableDate(payableDate);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String frequency = (String)attributes.get("frequency");

		if (frequency != null) {
			setFrequency(frequency);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}
	}

	@JSON
	@Override
	public long getRecId() {
		return _recId;
	}

	@Override
	public void setRecId(long recId) {
		_recId = recId;
	}

	@JSON
	@Override
	public long getAssetId() {
		return _assetId;
	}

	@Override
	public void setAssetId(long assetId) {
		_columnBitmask |= ASSETID_COLUMN_BITMASK;

		if (!_setOriginalAssetId) {
			_setOriginalAssetId = true;

			_originalAssetId = _assetId;
		}

		_assetId = assetId;
	}

	public long getOriginalAssetId() {
		return _originalAssetId;
	}

	@JSON
	@Override
	public Date getDeclaredDate() {
		return _declaredDate;
	}

	@Override
	public void setDeclaredDate(Date declaredDate) {
		_columnBitmask |= DECLAREDDATE_COLUMN_BITMASK;

		if (_originalDeclaredDate == null) {
			_originalDeclaredDate = _declaredDate;
		}

		_declaredDate = declaredDate;
	}

	public Date getOriginalDeclaredDate() {
		return _originalDeclaredDate;
	}

	@JSON
	@Override
	public Date getExDate() {
		return _exDate;
	}

	@Override
	public void setExDate(Date exDate) {
		_exDate = exDate;
	}

	@JSON
	@Override
	public Date getRecordDate() {
		return _recordDate;
	}

	@Override
	public void setRecordDate(Date recordDate) {
		_recordDate = recordDate;
	}

	@JSON
	@Override
	public Date getPayableDate() {
		return _payableDate;
	}

	@Override
	public void setPayableDate(Date payableDate) {
		_payableDate = payableDate;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public String getFrequency() {
		if (_frequency == null) {
			return StringPool.BLANK;
		}
		else {
			return _frequency;
		}
	}

	@Override
	public void setFrequency(String frequency) {
		_frequency = frequency;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Dividend.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dividend toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Dividend)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DividendImpl dividendImpl = new DividendImpl();

		dividendImpl.setRecId(getRecId());
		dividendImpl.setAssetId(getAssetId());
		dividendImpl.setDeclaredDate(getDeclaredDate());
		dividendImpl.setExDate(getExDate());
		dividendImpl.setRecordDate(getRecordDate());
		dividendImpl.setPayableDate(getPayableDate());
		dividendImpl.setAmount(getAmount());
		dividendImpl.setFrequency(getFrequency());
		dividendImpl.setType(getType());

		dividendImpl.resetOriginalValues();

		return dividendImpl;
	}

	@Override
	public int compareTo(Dividend dividend) {
		long primaryKey = dividend.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Dividend)) {
			return false;
		}

		Dividend dividend = (Dividend)obj;

		long primaryKey = dividend.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DividendModelImpl dividendModelImpl = this;

		dividendModelImpl._originalAssetId = dividendModelImpl._assetId;

		dividendModelImpl._setOriginalAssetId = false;

		dividendModelImpl._originalDeclaredDate = dividendModelImpl._declaredDate;

		dividendModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Dividend> toCacheModel() {
		DividendCacheModel dividendCacheModel = new DividendCacheModel();

		dividendCacheModel.recId = getRecId();

		dividendCacheModel.assetId = getAssetId();

		Date declaredDate = getDeclaredDate();

		if (declaredDate != null) {
			dividendCacheModel.declaredDate = declaredDate.getTime();
		}
		else {
			dividendCacheModel.declaredDate = Long.MIN_VALUE;
		}

		Date exDate = getExDate();

		if (exDate != null) {
			dividendCacheModel.exDate = exDate.getTime();
		}
		else {
			dividendCacheModel.exDate = Long.MIN_VALUE;
		}

		Date recordDate = getRecordDate();

		if (recordDate != null) {
			dividendCacheModel.recordDate = recordDate.getTime();
		}
		else {
			dividendCacheModel.recordDate = Long.MIN_VALUE;
		}

		Date payableDate = getPayableDate();

		if (payableDate != null) {
			dividendCacheModel.payableDate = payableDate.getTime();
		}
		else {
			dividendCacheModel.payableDate = Long.MIN_VALUE;
		}

		dividendCacheModel.amount = getAmount();

		dividendCacheModel.frequency = getFrequency();

		String frequency = dividendCacheModel.frequency;

		if ((frequency != null) && (frequency.length() == 0)) {
			dividendCacheModel.frequency = null;
		}

		dividendCacheModel.type = getType();

		String type = dividendCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			dividendCacheModel.type = null;
		}

		return dividendCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{recId=");
		sb.append(getRecId());
		sb.append(", assetId=");
		sb.append(getAssetId());
		sb.append(", declaredDate=");
		sb.append(getDeclaredDate());
		sb.append(", exDate=");
		sb.append(getExDate());
		sb.append(", recordDate=");
		sb.append(getRecordDate());
		sb.append(", payableDate=");
		sb.append(getPayableDate());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", frequency=");
		sb.append(getFrequency());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.Dividend");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recId</column-name><column-value><![CDATA[");
		sb.append(getRecId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetId</column-name><column-value><![CDATA[");
		sb.append(getAssetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>declaredDate</column-name><column-value><![CDATA[");
		sb.append(getDeclaredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exDate</column-name><column-value><![CDATA[");
		sb.append(getExDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordDate</column-name><column-value><![CDATA[");
		sb.append(getRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payableDate</column-name><column-value><![CDATA[");
		sb.append(getPayableDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frequency</column-name><column-value><![CDATA[");
		sb.append(getFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Dividend.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Dividend.class
		};
	private long _recId;
	private long _assetId;
	private long _originalAssetId;
	private boolean _setOriginalAssetId;
	private Date _declaredDate;
	private Date _originalDeclaredDate;
	private Date _exDate;
	private Date _recordDate;
	private Date _payableDate;
	private double _amount;
	private String _frequency;
	private String _type;
	private long _columnBitmask;
	private Dividend _escapedModel;
}