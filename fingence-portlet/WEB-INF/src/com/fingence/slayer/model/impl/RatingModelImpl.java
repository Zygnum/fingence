/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.Rating;
import com.fingence.slayer.model.RatingModel;
import com.fingence.slayer.model.RatingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Rating service. Represents a row in the &quot;fing_Rating&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.RatingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RatingImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see RatingImpl
 * @see com.fingence.slayer.model.Rating
 * @see com.fingence.slayer.model.RatingModel
 * @generated
 */
@JSON(strict = true)
public class RatingModelImpl extends BaseModelImpl<Rating>
	implements RatingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rating model instance should use the {@link com.fingence.slayer.model.Rating} interface instead.
	 */
	public static final String TABLE_NAME = "fing_Rating";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ratingId", Types.BIGINT },
			{ "moodys", Types.VARCHAR },
			{ "sandp", Types.VARCHAR },
			{ "fitch", Types.VARCHAR },
			{ "general", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "creditWorthiness", Types.VARCHAR },
			{ "category", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_Rating (ratingId LONG not null primary key,moodys VARCHAR(75) null,sandp VARCHAR(75) null,fitch VARCHAR(75) null,general VARCHAR(75) null,description VARCHAR(75) null,creditWorthiness VARCHAR(75) null,category VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table fing_Rating";
	public static final String ORDER_BY_JPQL = " ORDER BY rating.ratingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_Rating.ratingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.Rating"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.Rating"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fingence.slayer.model.Rating"),
			true);
	public static long DESCRIPTION_COLUMN_BITMASK = 1L;
	public static long FITCH_COLUMN_BITMASK = 2L;
	public static long MOODYS_COLUMN_BITMASK = 4L;
	public static long SANDP_COLUMN_BITMASK = 8L;
	public static long RATINGID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Rating toModel(RatingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Rating model = new RatingImpl();

		model.setRatingId(soapModel.getRatingId());
		model.setMoodys(soapModel.getMoodys());
		model.setSandp(soapModel.getSandp());
		model.setFitch(soapModel.getFitch());
		model.setGeneral(soapModel.getGeneral());
		model.setDescription(soapModel.getDescription());
		model.setCreditWorthiness(soapModel.getCreditWorthiness());
		model.setCategory(soapModel.getCategory());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Rating> toModels(RatingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Rating> models = new ArrayList<Rating>(soapModels.length);

		for (RatingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.Rating"));

	public RatingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ratingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRatingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ratingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Rating.class;
	}

	@Override
	public String getModelClassName() {
		return Rating.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ratingId", getRatingId());
		attributes.put("moodys", getMoodys());
		attributes.put("sandp", getSandp());
		attributes.put("fitch", getFitch());
		attributes.put("general", getGeneral());
		attributes.put("description", getDescription());
		attributes.put("creditWorthiness", getCreditWorthiness());
		attributes.put("category", getCategory());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ratingId = (Long)attributes.get("ratingId");

		if (ratingId != null) {
			setRatingId(ratingId);
		}

		String moodys = (String)attributes.get("moodys");

		if (moodys != null) {
			setMoodys(moodys);
		}

		String sandp = (String)attributes.get("sandp");

		if (sandp != null) {
			setSandp(sandp);
		}

		String fitch = (String)attributes.get("fitch");

		if (fitch != null) {
			setFitch(fitch);
		}

		String general = (String)attributes.get("general");

		if (general != null) {
			setGeneral(general);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String creditWorthiness = (String)attributes.get("creditWorthiness");

		if (creditWorthiness != null) {
			setCreditWorthiness(creditWorthiness);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}
	}

	@JSON
	@Override
	public long getRatingId() {
		return _ratingId;
	}

	@Override
	public void setRatingId(long ratingId) {
		_ratingId = ratingId;
	}

	@JSON
	@Override
	public String getMoodys() {
		if (_moodys == null) {
			return StringPool.BLANK;
		}
		else {
			return _moodys;
		}
	}

	@Override
	public void setMoodys(String moodys) {
		_columnBitmask |= MOODYS_COLUMN_BITMASK;

		if (_originalMoodys == null) {
			_originalMoodys = _moodys;
		}

		_moodys = moodys;
	}

	public String getOriginalMoodys() {
		return GetterUtil.getString(_originalMoodys);
	}

	@JSON
	@Override
	public String getSandp() {
		if (_sandp == null) {
			return StringPool.BLANK;
		}
		else {
			return _sandp;
		}
	}

	@Override
	public void setSandp(String sandp) {
		_columnBitmask |= SANDP_COLUMN_BITMASK;

		if (_originalSandp == null) {
			_originalSandp = _sandp;
		}

		_sandp = sandp;
	}

	public String getOriginalSandp() {
		return GetterUtil.getString(_originalSandp);
	}

	@JSON
	@Override
	public String getFitch() {
		if (_fitch == null) {
			return StringPool.BLANK;
		}
		else {
			return _fitch;
		}
	}

	@Override
	public void setFitch(String fitch) {
		_columnBitmask |= FITCH_COLUMN_BITMASK;

		if (_originalFitch == null) {
			_originalFitch = _fitch;
		}

		_fitch = fitch;
	}

	public String getOriginalFitch() {
		return GetterUtil.getString(_originalFitch);
	}

	@JSON
	@Override
	public String getGeneral() {
		if (_general == null) {
			return StringPool.BLANK;
		}
		else {
			return _general;
		}
	}

	@Override
	public void setGeneral(String general) {
		_general = general;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_columnBitmask |= DESCRIPTION_COLUMN_BITMASK;

		if (_originalDescription == null) {
			_originalDescription = _description;
		}

		_description = description;
	}

	public String getOriginalDescription() {
		return GetterUtil.getString(_originalDescription);
	}

	@JSON
	@Override
	public String getCreditWorthiness() {
		if (_creditWorthiness == null) {
			return StringPool.BLANK;
		}
		else {
			return _creditWorthiness;
		}
	}

	@Override
	public void setCreditWorthiness(String creditWorthiness) {
		_creditWorthiness = creditWorthiness;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Rating.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Rating toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Rating)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RatingImpl ratingImpl = new RatingImpl();

		ratingImpl.setRatingId(getRatingId());
		ratingImpl.setMoodys(getMoodys());
		ratingImpl.setSandp(getSandp());
		ratingImpl.setFitch(getFitch());
		ratingImpl.setGeneral(getGeneral());
		ratingImpl.setDescription(getDescription());
		ratingImpl.setCreditWorthiness(getCreditWorthiness());
		ratingImpl.setCategory(getCategory());

		ratingImpl.resetOriginalValues();

		return ratingImpl;
	}

	@Override
	public int compareTo(Rating rating) {
		long primaryKey = rating.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Rating)) {
			return false;
		}

		Rating rating = (Rating)obj;

		long primaryKey = rating.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RatingModelImpl ratingModelImpl = this;

		ratingModelImpl._originalMoodys = ratingModelImpl._moodys;

		ratingModelImpl._originalSandp = ratingModelImpl._sandp;

		ratingModelImpl._originalFitch = ratingModelImpl._fitch;

		ratingModelImpl._originalDescription = ratingModelImpl._description;

		ratingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Rating> toCacheModel() {
		RatingCacheModel ratingCacheModel = new RatingCacheModel();

		ratingCacheModel.ratingId = getRatingId();

		ratingCacheModel.moodys = getMoodys();

		String moodys = ratingCacheModel.moodys;

		if ((moodys != null) && (moodys.length() == 0)) {
			ratingCacheModel.moodys = null;
		}

		ratingCacheModel.sandp = getSandp();

		String sandp = ratingCacheModel.sandp;

		if ((sandp != null) && (sandp.length() == 0)) {
			ratingCacheModel.sandp = null;
		}

		ratingCacheModel.fitch = getFitch();

		String fitch = ratingCacheModel.fitch;

		if ((fitch != null) && (fitch.length() == 0)) {
			ratingCacheModel.fitch = null;
		}

		ratingCacheModel.general = getGeneral();

		String general = ratingCacheModel.general;

		if ((general != null) && (general.length() == 0)) {
			ratingCacheModel.general = null;
		}

		ratingCacheModel.description = getDescription();

		String description = ratingCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			ratingCacheModel.description = null;
		}

		ratingCacheModel.creditWorthiness = getCreditWorthiness();

		String creditWorthiness = ratingCacheModel.creditWorthiness;

		if ((creditWorthiness != null) && (creditWorthiness.length() == 0)) {
			ratingCacheModel.creditWorthiness = null;
		}

		ratingCacheModel.category = getCategory();

		String category = ratingCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			ratingCacheModel.category = null;
		}

		return ratingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{ratingId=");
		sb.append(getRatingId());
		sb.append(", moodys=");
		sb.append(getMoodys());
		sb.append(", sandp=");
		sb.append(getSandp());
		sb.append(", fitch=");
		sb.append(getFitch());
		sb.append(", general=");
		sb.append(getGeneral());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", creditWorthiness=");
		sb.append(getCreditWorthiness());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.Rating");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ratingId</column-name><column-value><![CDATA[");
		sb.append(getRatingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moodys</column-name><column-value><![CDATA[");
		sb.append(getMoodys());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sandp</column-name><column-value><![CDATA[");
		sb.append(getSandp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fitch</column-name><column-value><![CDATA[");
		sb.append(getFitch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>general</column-name><column-value><![CDATA[");
		sb.append(getGeneral());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creditWorthiness</column-name><column-value><![CDATA[");
		sb.append(getCreditWorthiness());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Rating.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Rating.class };
	private long _ratingId;
	private String _moodys;
	private String _originalMoodys;
	private String _sandp;
	private String _originalSandp;
	private String _fitch;
	private String _originalFitch;
	private String _general;
	private String _description;
	private String _originalDescription;
	private String _creditWorthiness;
	private String _category;
	private long _columnBitmask;
	private Rating _escapedModel;
}