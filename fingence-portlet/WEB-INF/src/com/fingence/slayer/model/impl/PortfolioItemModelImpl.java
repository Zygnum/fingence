/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.PortfolioItem;
import com.fingence.slayer.model.PortfolioItemModel;
import com.fingence.slayer.model.PortfolioItemSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PortfolioItem service. Represents a row in the &quot;fing_PortfolioItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.PortfolioItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortfolioItemImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see PortfolioItemImpl
 * @see com.fingence.slayer.model.PortfolioItem
 * @see com.fingence.slayer.model.PortfolioItemModel
 * @generated
 */
@JSON(strict = true)
public class PortfolioItemModelImpl extends BaseModelImpl<PortfolioItem>
	implements PortfolioItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a portfolio item model instance should use the {@link com.fingence.slayer.model.PortfolioItem} interface instead.
	 */
	public static final String TABLE_NAME = "fing_PortfolioItem";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemId", Types.BIGINT },
			{ "assetId", Types.BIGINT },
			{ "portfolioId", Types.BIGINT },
			{ "purchaseDate", Types.TIMESTAMP },
			{ "purchasePrice", Types.DOUBLE },
			{ "purchaseQty", Types.DOUBLE },
			{ "purchasedFx", Types.DOUBLE },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_PortfolioItem (itemId LONG not null primary key,assetId LONG,portfolioId LONG,purchaseDate DATE null,purchasePrice DOUBLE,purchaseQty DOUBLE,purchasedFx DOUBLE,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table fing_PortfolioItem";
	public static final String ORDER_BY_JPQL = " ORDER BY portfolioItem.itemId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_PortfolioItem.itemId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.PortfolioItem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.PortfolioItem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fingence.slayer.model.PortfolioItem"),
			true);
	public static long ASSETID_COLUMN_BITMASK = 1L;
	public static long PORTFOLIOID_COLUMN_BITMASK = 2L;
	public static long ITEMID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PortfolioItem toModel(PortfolioItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PortfolioItem model = new PortfolioItemImpl();

		model.setItemId(soapModel.getItemId());
		model.setAssetId(soapModel.getAssetId());
		model.setPortfolioId(soapModel.getPortfolioId());
		model.setPurchaseDate(soapModel.getPurchaseDate());
		model.setPurchasePrice(soapModel.getPurchasePrice());
		model.setPurchaseQty(soapModel.getPurchaseQty());
		model.setPurchasedFx(soapModel.getPurchasedFx());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PortfolioItem> toModels(PortfolioItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PortfolioItem> models = new ArrayList<PortfolioItem>(soapModels.length);

		for (PortfolioItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.PortfolioItem"));

	public PortfolioItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PortfolioItem.class;
	}

	@Override
	public String getModelClassName() {
		return PortfolioItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemId", getItemId());
		attributes.put("assetId", getAssetId());
		attributes.put("portfolioId", getPortfolioId());
		attributes.put("purchaseDate", getPurchaseDate());
		attributes.put("purchasePrice", getPurchasePrice());
		attributes.put("purchaseQty", getPurchaseQty());
		attributes.put("purchasedFx", getPurchasedFx());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemId = (Long)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Long assetId = (Long)attributes.get("assetId");

		if (assetId != null) {
			setAssetId(assetId);
		}

		Long portfolioId = (Long)attributes.get("portfolioId");

		if (portfolioId != null) {
			setPortfolioId(portfolioId);
		}

		Date purchaseDate = (Date)attributes.get("purchaseDate");

		if (purchaseDate != null) {
			setPurchaseDate(purchaseDate);
		}

		Double purchasePrice = (Double)attributes.get("purchasePrice");

		if (purchasePrice != null) {
			setPurchasePrice(purchasePrice);
		}

		Double purchaseQty = (Double)attributes.get("purchaseQty");

		if (purchaseQty != null) {
			setPurchaseQty(purchaseQty);
		}

		Double purchasedFx = (Double)attributes.get("purchasedFx");

		if (purchasedFx != null) {
			setPurchasedFx(purchasedFx);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		_itemId = itemId;
	}

	@JSON
	@Override
	public long getAssetId() {
		return _assetId;
	}

	@Override
	public void setAssetId(long assetId) {
		_columnBitmask |= ASSETID_COLUMN_BITMASK;

		if (!_setOriginalAssetId) {
			_setOriginalAssetId = true;

			_originalAssetId = _assetId;
		}

		_assetId = assetId;
	}

	public long getOriginalAssetId() {
		return _originalAssetId;
	}

	@JSON
	@Override
	public long getPortfolioId() {
		return _portfolioId;
	}

	@Override
	public void setPortfolioId(long portfolioId) {
		_columnBitmask |= PORTFOLIOID_COLUMN_BITMASK;

		if (!_setOriginalPortfolioId) {
			_setOriginalPortfolioId = true;

			_originalPortfolioId = _portfolioId;
		}

		_portfolioId = portfolioId;
	}

	public long getOriginalPortfolioId() {
		return _originalPortfolioId;
	}

	@JSON
	@Override
	public Date getPurchaseDate() {
		return _purchaseDate;
	}

	@Override
	public void setPurchaseDate(Date purchaseDate) {
		_purchaseDate = purchaseDate;
	}

	@JSON
	@Override
	public double getPurchasePrice() {
		return _purchasePrice;
	}

	@Override
	public void setPurchasePrice(double purchasePrice) {
		_purchasePrice = purchasePrice;
	}

	@JSON
	@Override
	public double getPurchaseQty() {
		return _purchaseQty;
	}

	@Override
	public void setPurchaseQty(double purchaseQty) {
		_purchaseQty = purchaseQty;
	}

	@JSON
	@Override
	public double getPurchasedFx() {
		return _purchasedFx;
	}

	@Override
	public void setPurchasedFx(double purchasedFx) {
		_purchasedFx = purchasedFx;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PortfolioItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PortfolioItem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PortfolioItem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PortfolioItemImpl portfolioItemImpl = new PortfolioItemImpl();

		portfolioItemImpl.setItemId(getItemId());
		portfolioItemImpl.setAssetId(getAssetId());
		portfolioItemImpl.setPortfolioId(getPortfolioId());
		portfolioItemImpl.setPurchaseDate(getPurchaseDate());
		portfolioItemImpl.setPurchasePrice(getPurchasePrice());
		portfolioItemImpl.setPurchaseQty(getPurchaseQty());
		portfolioItemImpl.setPurchasedFx(getPurchasedFx());
		portfolioItemImpl.setCreateDate(getCreateDate());
		portfolioItemImpl.setModifiedDate(getModifiedDate());

		portfolioItemImpl.resetOriginalValues();

		return portfolioItemImpl;
	}

	@Override
	public int compareTo(PortfolioItem portfolioItem) {
		long primaryKey = portfolioItem.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PortfolioItem)) {
			return false;
		}

		PortfolioItem portfolioItem = (PortfolioItem)obj;

		long primaryKey = portfolioItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PortfolioItemModelImpl portfolioItemModelImpl = this;

		portfolioItemModelImpl._originalAssetId = portfolioItemModelImpl._assetId;

		portfolioItemModelImpl._setOriginalAssetId = false;

		portfolioItemModelImpl._originalPortfolioId = portfolioItemModelImpl._portfolioId;

		portfolioItemModelImpl._setOriginalPortfolioId = false;

		portfolioItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PortfolioItem> toCacheModel() {
		PortfolioItemCacheModel portfolioItemCacheModel = new PortfolioItemCacheModel();

		portfolioItemCacheModel.itemId = getItemId();

		portfolioItemCacheModel.assetId = getAssetId();

		portfolioItemCacheModel.portfolioId = getPortfolioId();

		Date purchaseDate = getPurchaseDate();

		if (purchaseDate != null) {
			portfolioItemCacheModel.purchaseDate = purchaseDate.getTime();
		}
		else {
			portfolioItemCacheModel.purchaseDate = Long.MIN_VALUE;
		}

		portfolioItemCacheModel.purchasePrice = getPurchasePrice();

		portfolioItemCacheModel.purchaseQty = getPurchaseQty();

		portfolioItemCacheModel.purchasedFx = getPurchasedFx();

		Date createDate = getCreateDate();

		if (createDate != null) {
			portfolioItemCacheModel.createDate = createDate.getTime();
		}
		else {
			portfolioItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			portfolioItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			portfolioItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return portfolioItemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{itemId=");
		sb.append(getItemId());
		sb.append(", assetId=");
		sb.append(getAssetId());
		sb.append(", portfolioId=");
		sb.append(getPortfolioId());
		sb.append(", purchaseDate=");
		sb.append(getPurchaseDate());
		sb.append(", purchasePrice=");
		sb.append(getPurchasePrice());
		sb.append(", purchaseQty=");
		sb.append(getPurchaseQty());
		sb.append(", purchasedFx=");
		sb.append(getPurchasedFx());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.PortfolioItem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetId</column-name><column-value><![CDATA[");
		sb.append(getAssetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portfolioId</column-name><column-value><![CDATA[");
		sb.append(getPortfolioId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchaseDate</column-name><column-value><![CDATA[");
		sb.append(getPurchaseDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchasePrice</column-name><column-value><![CDATA[");
		sb.append(getPurchasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchaseQty</column-name><column-value><![CDATA[");
		sb.append(getPurchaseQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchasedFx</column-name><column-value><![CDATA[");
		sb.append(getPurchasedFx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PortfolioItem.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PortfolioItem.class
		};
	private long _itemId;
	private long _assetId;
	private long _originalAssetId;
	private boolean _setOriginalAssetId;
	private long _portfolioId;
	private long _originalPortfolioId;
	private boolean _setOriginalPortfolioId;
	private Date _purchaseDate;
	private double _purchasePrice;
	private double _purchaseQty;
	private double _purchasedFx;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private PortfolioItem _escapedModel;
}