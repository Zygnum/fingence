/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.Bond;
import com.fingence.slayer.model.BondModel;
import com.fingence.slayer.model.BondSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Bond service. Represents a row in the &quot;fing_Bond&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.BondModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BondImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see BondImpl
 * @see com.fingence.slayer.model.Bond
 * @see com.fingence.slayer.model.BondModel
 * @generated
 */
@JSON(strict = true)
public class BondModelImpl extends BaseModelImpl<Bond> implements BondModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bond model instance should use the {@link com.fingence.slayer.model.Bond} interface instead.
	 */
	public static final String TABLE_NAME = "fing_Bond";
	public static final Object[][] TABLE_COLUMNS = {
			{ "assetId", Types.BIGINT },
			{ "issuer_bulk", Types.VARCHAR },
			{ "cpn", Types.DOUBLE },
			{ "cpn_typ", Types.VARCHAR },
			{ "mty_typ", Types.VARCHAR },
			{ "mty_years_tdy", Types.DOUBLE },
			{ "yld_ytm_ask", Types.DOUBLE },
			{ "yld_ytm_bid", Types.DOUBLE },
			{ "yld_cur_mid", Types.DOUBLE },
			{ "issue_dt", Types.TIMESTAMP },
			{ "maturity_dt", Types.TIMESTAMP },
			{ "calc_typ", Types.DOUBLE },
			{ "is_bond_no_calctyp", Types.BOOLEAN },
			{ "collat_typ", Types.VARCHAR },
			{ "bb_composite", Types.VARCHAR },
			{ "rtg_sp", Types.VARCHAR },
			{ "rtg_moody", Types.VARCHAR },
			{ "rtg_fitch", Types.VARCHAR },
			{ "cpn_freq", Types.DOUBLE },
			{ "five_y_bid_cds_spread", Types.DOUBLE },
			{ "dur_mid", Types.DOUBLE },
			{ "price_to_cash_flow", Types.DOUBLE },
			{ "amount_issued", Types.DOUBLE },
			{ "amount_outstanding", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_Bond (assetId LONG not null primary key,issuer_bulk VARCHAR(75) null,cpn DOUBLE,cpn_typ VARCHAR(75) null,mty_typ VARCHAR(75) null,mty_years_tdy DOUBLE,yld_ytm_ask DOUBLE,yld_ytm_bid DOUBLE,yld_cur_mid DOUBLE,issue_dt DATE null,maturity_dt DATE null,calc_typ DOUBLE,is_bond_no_calctyp BOOLEAN,collat_typ VARCHAR(75) null,bb_composite VARCHAR(75) null,rtg_sp VARCHAR(75) null,rtg_moody VARCHAR(75) null,rtg_fitch VARCHAR(75) null,cpn_freq DOUBLE,five_y_bid_cds_spread DOUBLE,dur_mid DOUBLE,price_to_cash_flow DOUBLE,amount_issued DOUBLE,amount_outstanding DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table fing_Bond";
	public static final String ORDER_BY_JPQL = " ORDER BY bond.assetId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_Bond.assetId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.Bond"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.Bond"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Bond toModel(BondSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Bond model = new BondImpl();

		model.setAssetId(soapModel.getAssetId());
		model.setIssuer_bulk(soapModel.getIssuer_bulk());
		model.setCpn(soapModel.getCpn());
		model.setCpn_typ(soapModel.getCpn_typ());
		model.setMty_typ(soapModel.getMty_typ());
		model.setMty_years_tdy(soapModel.getMty_years_tdy());
		model.setYld_ytm_ask(soapModel.getYld_ytm_ask());
		model.setYld_ytm_bid(soapModel.getYld_ytm_bid());
		model.setYld_cur_mid(soapModel.getYld_cur_mid());
		model.setIssue_dt(soapModel.getIssue_dt());
		model.setMaturity_dt(soapModel.getMaturity_dt());
		model.setCalc_typ(soapModel.getCalc_typ());
		model.setIs_bond_no_calctyp(soapModel.getIs_bond_no_calctyp());
		model.setCollat_typ(soapModel.getCollat_typ());
		model.setBb_composite(soapModel.getBb_composite());
		model.setRtg_sp(soapModel.getRtg_sp());
		model.setRtg_moody(soapModel.getRtg_moody());
		model.setRtg_fitch(soapModel.getRtg_fitch());
		model.setCpn_freq(soapModel.getCpn_freq());
		model.setFive_y_bid_cds_spread(soapModel.getFive_y_bid_cds_spread());
		model.setDur_mid(soapModel.getDur_mid());
		model.setPrice_to_cash_flow(soapModel.getPrice_to_cash_flow());
		model.setAmount_issued(soapModel.getAmount_issued());
		model.setAmount_outstanding(soapModel.getAmount_outstanding());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Bond> toModels(BondSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Bond> models = new ArrayList<Bond>(soapModels.length);

		for (BondSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.Bond"));

	public BondModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _assetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAssetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _assetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Bond.class;
	}

	@Override
	public String getModelClassName() {
		return Bond.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("assetId", getAssetId());
		attributes.put("issuer_bulk", getIssuer_bulk());
		attributes.put("cpn", getCpn());
		attributes.put("cpn_typ", getCpn_typ());
		attributes.put("mty_typ", getMty_typ());
		attributes.put("mty_years_tdy", getMty_years_tdy());
		attributes.put("yld_ytm_ask", getYld_ytm_ask());
		attributes.put("yld_ytm_bid", getYld_ytm_bid());
		attributes.put("yld_cur_mid", getYld_cur_mid());
		attributes.put("issue_dt", getIssue_dt());
		attributes.put("maturity_dt", getMaturity_dt());
		attributes.put("calc_typ", getCalc_typ());
		attributes.put("is_bond_no_calctyp", getIs_bond_no_calctyp());
		attributes.put("collat_typ", getCollat_typ());
		attributes.put("bb_composite", getBb_composite());
		attributes.put("rtg_sp", getRtg_sp());
		attributes.put("rtg_moody", getRtg_moody());
		attributes.put("rtg_fitch", getRtg_fitch());
		attributes.put("cpn_freq", getCpn_freq());
		attributes.put("five_y_bid_cds_spread", getFive_y_bid_cds_spread());
		attributes.put("dur_mid", getDur_mid());
		attributes.put("price_to_cash_flow", getPrice_to_cash_flow());
		attributes.put("amount_issued", getAmount_issued());
		attributes.put("amount_outstanding", getAmount_outstanding());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long assetId = (Long)attributes.get("assetId");

		if (assetId != null) {
			setAssetId(assetId);
		}

		String issuer_bulk = (String)attributes.get("issuer_bulk");

		if (issuer_bulk != null) {
			setIssuer_bulk(issuer_bulk);
		}

		Double cpn = (Double)attributes.get("cpn");

		if (cpn != null) {
			setCpn(cpn);
		}

		String cpn_typ = (String)attributes.get("cpn_typ");

		if (cpn_typ != null) {
			setCpn_typ(cpn_typ);
		}

		String mty_typ = (String)attributes.get("mty_typ");

		if (mty_typ != null) {
			setMty_typ(mty_typ);
		}

		Double mty_years_tdy = (Double)attributes.get("mty_years_tdy");

		if (mty_years_tdy != null) {
			setMty_years_tdy(mty_years_tdy);
		}

		Double yld_ytm_ask = (Double)attributes.get("yld_ytm_ask");

		if (yld_ytm_ask != null) {
			setYld_ytm_ask(yld_ytm_ask);
		}

		Double yld_ytm_bid = (Double)attributes.get("yld_ytm_bid");

		if (yld_ytm_bid != null) {
			setYld_ytm_bid(yld_ytm_bid);
		}

		Double yld_cur_mid = (Double)attributes.get("yld_cur_mid");

		if (yld_cur_mid != null) {
			setYld_cur_mid(yld_cur_mid);
		}

		Date issue_dt = (Date)attributes.get("issue_dt");

		if (issue_dt != null) {
			setIssue_dt(issue_dt);
		}

		Date maturity_dt = (Date)attributes.get("maturity_dt");

		if (maturity_dt != null) {
			setMaturity_dt(maturity_dt);
		}

		Double calc_typ = (Double)attributes.get("calc_typ");

		if (calc_typ != null) {
			setCalc_typ(calc_typ);
		}

		Boolean is_bond_no_calctyp = (Boolean)attributes.get(
				"is_bond_no_calctyp");

		if (is_bond_no_calctyp != null) {
			setIs_bond_no_calctyp(is_bond_no_calctyp);
		}

		String collat_typ = (String)attributes.get("collat_typ");

		if (collat_typ != null) {
			setCollat_typ(collat_typ);
		}

		String bb_composite = (String)attributes.get("bb_composite");

		if (bb_composite != null) {
			setBb_composite(bb_composite);
		}

		String rtg_sp = (String)attributes.get("rtg_sp");

		if (rtg_sp != null) {
			setRtg_sp(rtg_sp);
		}

		String rtg_moody = (String)attributes.get("rtg_moody");

		if (rtg_moody != null) {
			setRtg_moody(rtg_moody);
		}

		String rtg_fitch = (String)attributes.get("rtg_fitch");

		if (rtg_fitch != null) {
			setRtg_fitch(rtg_fitch);
		}

		Double cpn_freq = (Double)attributes.get("cpn_freq");

		if (cpn_freq != null) {
			setCpn_freq(cpn_freq);
		}

		Double five_y_bid_cds_spread = (Double)attributes.get(
				"five_y_bid_cds_spread");

		if (five_y_bid_cds_spread != null) {
			setFive_y_bid_cds_spread(five_y_bid_cds_spread);
		}

		Double dur_mid = (Double)attributes.get("dur_mid");

		if (dur_mid != null) {
			setDur_mid(dur_mid);
		}

		Double price_to_cash_flow = (Double)attributes.get("price_to_cash_flow");

		if (price_to_cash_flow != null) {
			setPrice_to_cash_flow(price_to_cash_flow);
		}

		Double amount_issued = (Double)attributes.get("amount_issued");

		if (amount_issued != null) {
			setAmount_issued(amount_issued);
		}

		Double amount_outstanding = (Double)attributes.get("amount_outstanding");

		if (amount_outstanding != null) {
			setAmount_outstanding(amount_outstanding);
		}
	}

	@JSON
	@Override
	public long getAssetId() {
		return _assetId;
	}

	@Override
	public void setAssetId(long assetId) {
		_assetId = assetId;
	}

	@JSON
	@Override
	public String getIssuer_bulk() {
		if (_issuer_bulk == null) {
			return StringPool.BLANK;
		}
		else {
			return _issuer_bulk;
		}
	}

	@Override
	public void setIssuer_bulk(String issuer_bulk) {
		_issuer_bulk = issuer_bulk;
	}

	@JSON
	@Override
	public double getCpn() {
		return _cpn;
	}

	@Override
	public void setCpn(double cpn) {
		_cpn = cpn;
	}

	@JSON
	@Override
	public String getCpn_typ() {
		if (_cpn_typ == null) {
			return StringPool.BLANK;
		}
		else {
			return _cpn_typ;
		}
	}

	@Override
	public void setCpn_typ(String cpn_typ) {
		_cpn_typ = cpn_typ;
	}

	@JSON
	@Override
	public String getMty_typ() {
		if (_mty_typ == null) {
			return StringPool.BLANK;
		}
		else {
			return _mty_typ;
		}
	}

	@Override
	public void setMty_typ(String mty_typ) {
		_mty_typ = mty_typ;
	}

	@JSON
	@Override
	public double getMty_years_tdy() {
		return _mty_years_tdy;
	}

	@Override
	public void setMty_years_tdy(double mty_years_tdy) {
		_mty_years_tdy = mty_years_tdy;
	}

	@JSON
	@Override
	public double getYld_ytm_ask() {
		return _yld_ytm_ask;
	}

	@Override
	public void setYld_ytm_ask(double yld_ytm_ask) {
		_yld_ytm_ask = yld_ytm_ask;
	}

	@JSON
	@Override
	public double getYld_ytm_bid() {
		return _yld_ytm_bid;
	}

	@Override
	public void setYld_ytm_bid(double yld_ytm_bid) {
		_yld_ytm_bid = yld_ytm_bid;
	}

	@JSON
	@Override
	public double getYld_cur_mid() {
		return _yld_cur_mid;
	}

	@Override
	public void setYld_cur_mid(double yld_cur_mid) {
		_yld_cur_mid = yld_cur_mid;
	}

	@JSON
	@Override
	public Date getIssue_dt() {
		return _issue_dt;
	}

	@Override
	public void setIssue_dt(Date issue_dt) {
		_issue_dt = issue_dt;
	}

	@JSON
	@Override
	public Date getMaturity_dt() {
		return _maturity_dt;
	}

	@Override
	public void setMaturity_dt(Date maturity_dt) {
		_maturity_dt = maturity_dt;
	}

	@JSON
	@Override
	public double getCalc_typ() {
		return _calc_typ;
	}

	@Override
	public void setCalc_typ(double calc_typ) {
		_calc_typ = calc_typ;
	}

	@JSON
	@Override
	public boolean getIs_bond_no_calctyp() {
		return _is_bond_no_calctyp;
	}

	@Override
	public boolean isIs_bond_no_calctyp() {
		return _is_bond_no_calctyp;
	}

	@Override
	public void setIs_bond_no_calctyp(boolean is_bond_no_calctyp) {
		_is_bond_no_calctyp = is_bond_no_calctyp;
	}

	@JSON
	@Override
	public String getCollat_typ() {
		if (_collat_typ == null) {
			return StringPool.BLANK;
		}
		else {
			return _collat_typ;
		}
	}

	@Override
	public void setCollat_typ(String collat_typ) {
		_collat_typ = collat_typ;
	}

	@JSON
	@Override
	public String getBb_composite() {
		if (_bb_composite == null) {
			return StringPool.BLANK;
		}
		else {
			return _bb_composite;
		}
	}

	@Override
	public void setBb_composite(String bb_composite) {
		_bb_composite = bb_composite;
	}

	@JSON
	@Override
	public String getRtg_sp() {
		if (_rtg_sp == null) {
			return StringPool.BLANK;
		}
		else {
			return _rtg_sp;
		}
	}

	@Override
	public void setRtg_sp(String rtg_sp) {
		_rtg_sp = rtg_sp;
	}

	@JSON
	@Override
	public String getRtg_moody() {
		if (_rtg_moody == null) {
			return StringPool.BLANK;
		}
		else {
			return _rtg_moody;
		}
	}

	@Override
	public void setRtg_moody(String rtg_moody) {
		_rtg_moody = rtg_moody;
	}

	@JSON
	@Override
	public String getRtg_fitch() {
		if (_rtg_fitch == null) {
			return StringPool.BLANK;
		}
		else {
			return _rtg_fitch;
		}
	}

	@Override
	public void setRtg_fitch(String rtg_fitch) {
		_rtg_fitch = rtg_fitch;
	}

	@JSON
	@Override
	public double getCpn_freq() {
		return _cpn_freq;
	}

	@Override
	public void setCpn_freq(double cpn_freq) {
		_cpn_freq = cpn_freq;
	}

	@JSON
	@Override
	public double getFive_y_bid_cds_spread() {
		return _five_y_bid_cds_spread;
	}

	@Override
	public void setFive_y_bid_cds_spread(double five_y_bid_cds_spread) {
		_five_y_bid_cds_spread = five_y_bid_cds_spread;
	}

	@JSON
	@Override
	public double getDur_mid() {
		return _dur_mid;
	}

	@Override
	public void setDur_mid(double dur_mid) {
		_dur_mid = dur_mid;
	}

	@JSON
	@Override
	public double getPrice_to_cash_flow() {
		return _price_to_cash_flow;
	}

	@Override
	public void setPrice_to_cash_flow(double price_to_cash_flow) {
		_price_to_cash_flow = price_to_cash_flow;
	}

	@JSON
	@Override
	public double getAmount_issued() {
		return _amount_issued;
	}

	@Override
	public void setAmount_issued(double amount_issued) {
		_amount_issued = amount_issued;
	}

	@JSON
	@Override
	public double getAmount_outstanding() {
		return _amount_outstanding;
	}

	@Override
	public void setAmount_outstanding(double amount_outstanding) {
		_amount_outstanding = amount_outstanding;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Bond.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Bond toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Bond)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BondImpl bondImpl = new BondImpl();

		bondImpl.setAssetId(getAssetId());
		bondImpl.setIssuer_bulk(getIssuer_bulk());
		bondImpl.setCpn(getCpn());
		bondImpl.setCpn_typ(getCpn_typ());
		bondImpl.setMty_typ(getMty_typ());
		bondImpl.setMty_years_tdy(getMty_years_tdy());
		bondImpl.setYld_ytm_ask(getYld_ytm_ask());
		bondImpl.setYld_ytm_bid(getYld_ytm_bid());
		bondImpl.setYld_cur_mid(getYld_cur_mid());
		bondImpl.setIssue_dt(getIssue_dt());
		bondImpl.setMaturity_dt(getMaturity_dt());
		bondImpl.setCalc_typ(getCalc_typ());
		bondImpl.setIs_bond_no_calctyp(getIs_bond_no_calctyp());
		bondImpl.setCollat_typ(getCollat_typ());
		bondImpl.setBb_composite(getBb_composite());
		bondImpl.setRtg_sp(getRtg_sp());
		bondImpl.setRtg_moody(getRtg_moody());
		bondImpl.setRtg_fitch(getRtg_fitch());
		bondImpl.setCpn_freq(getCpn_freq());
		bondImpl.setFive_y_bid_cds_spread(getFive_y_bid_cds_spread());
		bondImpl.setDur_mid(getDur_mid());
		bondImpl.setPrice_to_cash_flow(getPrice_to_cash_flow());
		bondImpl.setAmount_issued(getAmount_issued());
		bondImpl.setAmount_outstanding(getAmount_outstanding());

		bondImpl.resetOriginalValues();

		return bondImpl;
	}

	@Override
	public int compareTo(Bond bond) {
		long primaryKey = bond.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Bond)) {
			return false;
		}

		Bond bond = (Bond)obj;

		long primaryKey = bond.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Bond> toCacheModel() {
		BondCacheModel bondCacheModel = new BondCacheModel();

		bondCacheModel.assetId = getAssetId();

		bondCacheModel.issuer_bulk = getIssuer_bulk();

		String issuer_bulk = bondCacheModel.issuer_bulk;

		if ((issuer_bulk != null) && (issuer_bulk.length() == 0)) {
			bondCacheModel.issuer_bulk = null;
		}

		bondCacheModel.cpn = getCpn();

		bondCacheModel.cpn_typ = getCpn_typ();

		String cpn_typ = bondCacheModel.cpn_typ;

		if ((cpn_typ != null) && (cpn_typ.length() == 0)) {
			bondCacheModel.cpn_typ = null;
		}

		bondCacheModel.mty_typ = getMty_typ();

		String mty_typ = bondCacheModel.mty_typ;

		if ((mty_typ != null) && (mty_typ.length() == 0)) {
			bondCacheModel.mty_typ = null;
		}

		bondCacheModel.mty_years_tdy = getMty_years_tdy();

		bondCacheModel.yld_ytm_ask = getYld_ytm_ask();

		bondCacheModel.yld_ytm_bid = getYld_ytm_bid();

		bondCacheModel.yld_cur_mid = getYld_cur_mid();

		Date issue_dt = getIssue_dt();

		if (issue_dt != null) {
			bondCacheModel.issue_dt = issue_dt.getTime();
		}
		else {
			bondCacheModel.issue_dt = Long.MIN_VALUE;
		}

		Date maturity_dt = getMaturity_dt();

		if (maturity_dt != null) {
			bondCacheModel.maturity_dt = maturity_dt.getTime();
		}
		else {
			bondCacheModel.maturity_dt = Long.MIN_VALUE;
		}

		bondCacheModel.calc_typ = getCalc_typ();

		bondCacheModel.is_bond_no_calctyp = getIs_bond_no_calctyp();

		bondCacheModel.collat_typ = getCollat_typ();

		String collat_typ = bondCacheModel.collat_typ;

		if ((collat_typ != null) && (collat_typ.length() == 0)) {
			bondCacheModel.collat_typ = null;
		}

		bondCacheModel.bb_composite = getBb_composite();

		String bb_composite = bondCacheModel.bb_composite;

		if ((bb_composite != null) && (bb_composite.length() == 0)) {
			bondCacheModel.bb_composite = null;
		}

		bondCacheModel.rtg_sp = getRtg_sp();

		String rtg_sp = bondCacheModel.rtg_sp;

		if ((rtg_sp != null) && (rtg_sp.length() == 0)) {
			bondCacheModel.rtg_sp = null;
		}

		bondCacheModel.rtg_moody = getRtg_moody();

		String rtg_moody = bondCacheModel.rtg_moody;

		if ((rtg_moody != null) && (rtg_moody.length() == 0)) {
			bondCacheModel.rtg_moody = null;
		}

		bondCacheModel.rtg_fitch = getRtg_fitch();

		String rtg_fitch = bondCacheModel.rtg_fitch;

		if ((rtg_fitch != null) && (rtg_fitch.length() == 0)) {
			bondCacheModel.rtg_fitch = null;
		}

		bondCacheModel.cpn_freq = getCpn_freq();

		bondCacheModel.five_y_bid_cds_spread = getFive_y_bid_cds_spread();

		bondCacheModel.dur_mid = getDur_mid();

		bondCacheModel.price_to_cash_flow = getPrice_to_cash_flow();

		bondCacheModel.amount_issued = getAmount_issued();

		bondCacheModel.amount_outstanding = getAmount_outstanding();

		return bondCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{assetId=");
		sb.append(getAssetId());
		sb.append(", issuer_bulk=");
		sb.append(getIssuer_bulk());
		sb.append(", cpn=");
		sb.append(getCpn());
		sb.append(", cpn_typ=");
		sb.append(getCpn_typ());
		sb.append(", mty_typ=");
		sb.append(getMty_typ());
		sb.append(", mty_years_tdy=");
		sb.append(getMty_years_tdy());
		sb.append(", yld_ytm_ask=");
		sb.append(getYld_ytm_ask());
		sb.append(", yld_ytm_bid=");
		sb.append(getYld_ytm_bid());
		sb.append(", yld_cur_mid=");
		sb.append(getYld_cur_mid());
		sb.append(", issue_dt=");
		sb.append(getIssue_dt());
		sb.append(", maturity_dt=");
		sb.append(getMaturity_dt());
		sb.append(", calc_typ=");
		sb.append(getCalc_typ());
		sb.append(", is_bond_no_calctyp=");
		sb.append(getIs_bond_no_calctyp());
		sb.append(", collat_typ=");
		sb.append(getCollat_typ());
		sb.append(", bb_composite=");
		sb.append(getBb_composite());
		sb.append(", rtg_sp=");
		sb.append(getRtg_sp());
		sb.append(", rtg_moody=");
		sb.append(getRtg_moody());
		sb.append(", rtg_fitch=");
		sb.append(getRtg_fitch());
		sb.append(", cpn_freq=");
		sb.append(getCpn_freq());
		sb.append(", five_y_bid_cds_spread=");
		sb.append(getFive_y_bid_cds_spread());
		sb.append(", dur_mid=");
		sb.append(getDur_mid());
		sb.append(", price_to_cash_flow=");
		sb.append(getPrice_to_cash_flow());
		sb.append(", amount_issued=");
		sb.append(getAmount_issued());
		sb.append(", amount_outstanding=");
		sb.append(getAmount_outstanding());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.Bond");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>assetId</column-name><column-value><![CDATA[");
		sb.append(getAssetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuer_bulk</column-name><column-value><![CDATA[");
		sb.append(getIssuer_bulk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cpn</column-name><column-value><![CDATA[");
		sb.append(getCpn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cpn_typ</column-name><column-value><![CDATA[");
		sb.append(getCpn_typ());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mty_typ</column-name><column-value><![CDATA[");
		sb.append(getMty_typ());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mty_years_tdy</column-name><column-value><![CDATA[");
		sb.append(getMty_years_tdy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yld_ytm_ask</column-name><column-value><![CDATA[");
		sb.append(getYld_ytm_ask());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yld_ytm_bid</column-name><column-value><![CDATA[");
		sb.append(getYld_ytm_bid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yld_cur_mid</column-name><column-value><![CDATA[");
		sb.append(getYld_cur_mid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issue_dt</column-name><column-value><![CDATA[");
		sb.append(getIssue_dt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maturity_dt</column-name><column-value><![CDATA[");
		sb.append(getMaturity_dt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calc_typ</column-name><column-value><![CDATA[");
		sb.append(getCalc_typ());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>is_bond_no_calctyp</column-name><column-value><![CDATA[");
		sb.append(getIs_bond_no_calctyp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collat_typ</column-name><column-value><![CDATA[");
		sb.append(getCollat_typ());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bb_composite</column-name><column-value><![CDATA[");
		sb.append(getBb_composite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rtg_sp</column-name><column-value><![CDATA[");
		sb.append(getRtg_sp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rtg_moody</column-name><column-value><![CDATA[");
		sb.append(getRtg_moody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rtg_fitch</column-name><column-value><![CDATA[");
		sb.append(getRtg_fitch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cpn_freq</column-name><column-value><![CDATA[");
		sb.append(getCpn_freq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>five_y_bid_cds_spread</column-name><column-value><![CDATA[");
		sb.append(getFive_y_bid_cds_spread());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dur_mid</column-name><column-value><![CDATA[");
		sb.append(getDur_mid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price_to_cash_flow</column-name><column-value><![CDATA[");
		sb.append(getPrice_to_cash_flow());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount_issued</column-name><column-value><![CDATA[");
		sb.append(getAmount_issued());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount_outstanding</column-name><column-value><![CDATA[");
		sb.append(getAmount_outstanding());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Bond.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Bond.class };
	private long _assetId;
	private String _issuer_bulk;
	private double _cpn;
	private String _cpn_typ;
	private String _mty_typ;
	private double _mty_years_tdy;
	private double _yld_ytm_ask;
	private double _yld_ytm_bid;
	private double _yld_cur_mid;
	private Date _issue_dt;
	private Date _maturity_dt;
	private double _calc_typ;
	private boolean _is_bond_no_calctyp;
	private String _collat_typ;
	private String _bb_composite;
	private String _rtg_sp;
	private String _rtg_moody;
	private String _rtg_fitch;
	private double _cpn_freq;
	private double _five_y_bid_cds_spread;
	private double _dur_mid;
	private double _price_to_cash_flow;
	private double _amount_issued;
	private double _amount_outstanding;
	private Bond _escapedModel;
}