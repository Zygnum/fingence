/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.MyResult;
import com.fingence.slayer.model.MyResultModel;
import com.fingence.slayer.model.MyResultSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MyResult service. Represents a row in the &quot;fing_MyResult&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.MyResultModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MyResultImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see MyResultImpl
 * @see com.fingence.slayer.model.MyResult
 * @see com.fingence.slayer.model.MyResultModel
 * @generated
 */
@JSON(strict = true)
public class MyResultModelImpl extends BaseModelImpl<MyResult>
	implements MyResultModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a my result model instance should use the {@link com.fingence.slayer.model.MyResult} interface instead.
	 */
	public static final String TABLE_NAME = "fing_MyResult";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemId", Types.BIGINT },
			{ "portfolioId", Types.BIGINT },
			{ "institution", Types.VARCHAR },
			{ "assetId", Types.BIGINT },
			{ "security_ticker", Types.VARCHAR },
			{ "id_isin", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "industry_sector", Types.VARCHAR },
			{ "purchaseQty", Types.DOUBLE },
			{ "purchaseDate", Types.TIMESTAMP },
			{ "current_price", Types.DOUBLE },
			{ "purchasedFx", Types.DOUBLE },
			{ "current_fx", Types.DOUBLE },
			{ "baseCurrency", Types.VARCHAR },
			{ "security_des", Types.VARCHAR },
			{ "security_class_int", Types.INTEGER },
			{ "security_class", Types.VARCHAR },
			{ "security_typ", Types.VARCHAR },
			{ "security_typ2", Types.VARCHAR },
			{ "asset_class", Types.VARCHAR },
			{ "asset_sub_class", Types.VARCHAR },
			{ "parent_comp_name", Types.VARCHAR },
			{ "countryId", Types.BIGINT },
			{ "countryName", Types.VARCHAR },
			{ "countryOfRisk", Types.BIGINT },
			{ "countryOfRiskName", Types.VARCHAR },
			{ "currency_", Types.VARCHAR },
			{ "currencyDesc", Types.VARCHAR },
			{ "purchasedMarketValue", Types.DOUBLE },
			{ "currentMarketValue", Types.DOUBLE },
			{ "gain_loss", Types.DOUBLE },
			{ "gain_loss_percent", Types.DOUBLE },
			{ "fx_gain_loss", Types.DOUBLE },
			{ "income", Types.DOUBLE },
			{ "currencySymbol", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_MyResult (itemId LONG not null primary key,portfolioId LONG,institution VARCHAR(75) null,assetId LONG,security_ticker VARCHAR(75) null,id_isin VARCHAR(75) null,name VARCHAR(75) null,industry_sector VARCHAR(75) null,purchaseQty DOUBLE,purchaseDate DATE null,current_price DOUBLE,purchasedFx DOUBLE,current_fx DOUBLE,baseCurrency VARCHAR(75) null,security_des VARCHAR(75) null,security_class_int INTEGER,security_class VARCHAR(75) null,security_typ VARCHAR(75) null,security_typ2 VARCHAR(75) null,asset_class VARCHAR(75) null,asset_sub_class VARCHAR(75) null,parent_comp_name VARCHAR(75) null,countryId LONG,countryName VARCHAR(75) null,countryOfRisk LONG,countryOfRiskName VARCHAR(75) null,currency_ VARCHAR(75) null,currencyDesc VARCHAR(75) null,purchasedMarketValue DOUBLE,currentMarketValue DOUBLE,gain_loss DOUBLE,gain_loss_percent DOUBLE,fx_gain_loss DOUBLE,income DOUBLE,currencySymbol VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table fing_MyResult";
	public static final String ORDER_BY_JPQL = " ORDER BY myResult.itemId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_MyResult.itemId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.MyResult"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.MyResult"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fingence.slayer.model.MyResult"),
			true);
	public static long PORTFOLIOID_COLUMN_BITMASK = 1L;
	public static long ITEMID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MyResult toModel(MyResultSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MyResult model = new MyResultImpl();

		model.setItemId(soapModel.getItemId());
		model.setPortfolioId(soapModel.getPortfolioId());
		model.setInstitution(soapModel.getInstitution());
		model.setAssetId(soapModel.getAssetId());
		model.setSecurity_ticker(soapModel.getSecurity_ticker());
		model.setId_isin(soapModel.getId_isin());
		model.setName(soapModel.getName());
		model.setIndustry_sector(soapModel.getIndustry_sector());
		model.setPurchaseQty(soapModel.getPurchaseQty());
		model.setPurchaseDate(soapModel.getPurchaseDate());
		model.setCurrent_price(soapModel.getCurrent_price());
		model.setPurchasedFx(soapModel.getPurchasedFx());
		model.setCurrent_fx(soapModel.getCurrent_fx());
		model.setBaseCurrency(soapModel.getBaseCurrency());
		model.setSecurity_des(soapModel.getSecurity_des());
		model.setSecurity_class_int(soapModel.getSecurity_class_int());
		model.setSecurity_class(soapModel.getSecurity_class());
		model.setSecurity_typ(soapModel.getSecurity_typ());
		model.setSecurity_typ2(soapModel.getSecurity_typ2());
		model.setAsset_class(soapModel.getAsset_class());
		model.setAsset_sub_class(soapModel.getAsset_sub_class());
		model.setParent_comp_name(soapModel.getParent_comp_name());
		model.setCountryId(soapModel.getCountryId());
		model.setCountryName(soapModel.getCountryName());
		model.setCountryOfRisk(soapModel.getCountryOfRisk());
		model.setCountryOfRiskName(soapModel.getCountryOfRiskName());
		model.setCurrency_(soapModel.getCurrency_());
		model.setCurrencyDesc(soapModel.getCurrencyDesc());
		model.setPurchasedMarketValue(soapModel.getPurchasedMarketValue());
		model.setCurrentMarketValue(soapModel.getCurrentMarketValue());
		model.setGain_loss(soapModel.getGain_loss());
		model.setGain_loss_percent(soapModel.getGain_loss_percent());
		model.setFx_gain_loss(soapModel.getFx_gain_loss());
		model.setIncome(soapModel.getIncome());
		model.setCurrencySymbol(soapModel.getCurrencySymbol());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MyResult> toModels(MyResultSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MyResult> models = new ArrayList<MyResult>(soapModels.length);

		for (MyResultSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.MyResult"));

	public MyResultModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MyResult.class;
	}

	@Override
	public String getModelClassName() {
		return MyResult.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemId", getItemId());
		attributes.put("portfolioId", getPortfolioId());
		attributes.put("institution", getInstitution());
		attributes.put("assetId", getAssetId());
		attributes.put("security_ticker", getSecurity_ticker());
		attributes.put("id_isin", getId_isin());
		attributes.put("name", getName());
		attributes.put("industry_sector", getIndustry_sector());
		attributes.put("purchaseQty", getPurchaseQty());
		attributes.put("purchaseDate", getPurchaseDate());
		attributes.put("current_price", getCurrent_price());
		attributes.put("purchasedFx", getPurchasedFx());
		attributes.put("current_fx", getCurrent_fx());
		attributes.put("baseCurrency", getBaseCurrency());
		attributes.put("security_des", getSecurity_des());
		attributes.put("security_class_int", getSecurity_class_int());
		attributes.put("security_class", getSecurity_class());
		attributes.put("security_typ", getSecurity_typ());
		attributes.put("security_typ2", getSecurity_typ2());
		attributes.put("asset_class", getAsset_class());
		attributes.put("asset_sub_class", getAsset_sub_class());
		attributes.put("parent_comp_name", getParent_comp_name());
		attributes.put("countryId", getCountryId());
		attributes.put("countryName", getCountryName());
		attributes.put("countryOfRisk", getCountryOfRisk());
		attributes.put("countryOfRiskName", getCountryOfRiskName());
		attributes.put("currency_", getCurrency_());
		attributes.put("currencyDesc", getCurrencyDesc());
		attributes.put("purchasedMarketValue", getPurchasedMarketValue());
		attributes.put("currentMarketValue", getCurrentMarketValue());
		attributes.put("gain_loss", getGain_loss());
		attributes.put("gain_loss_percent", getGain_loss_percent());
		attributes.put("fx_gain_loss", getFx_gain_loss());
		attributes.put("income", getIncome());
		attributes.put("currencySymbol", getCurrencySymbol());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemId = (Long)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Long portfolioId = (Long)attributes.get("portfolioId");

		if (portfolioId != null) {
			setPortfolioId(portfolioId);
		}

		String institution = (String)attributes.get("institution");

		if (institution != null) {
			setInstitution(institution);
		}

		Long assetId = (Long)attributes.get("assetId");

		if (assetId != null) {
			setAssetId(assetId);
		}

		String security_ticker = (String)attributes.get("security_ticker");

		if (security_ticker != null) {
			setSecurity_ticker(security_ticker);
		}

		String id_isin = (String)attributes.get("id_isin");

		if (id_isin != null) {
			setId_isin(id_isin);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String industry_sector = (String)attributes.get("industry_sector");

		if (industry_sector != null) {
			setIndustry_sector(industry_sector);
		}

		Double purchaseQty = (Double)attributes.get("purchaseQty");

		if (purchaseQty != null) {
			setPurchaseQty(purchaseQty);
		}

		Date purchaseDate = (Date)attributes.get("purchaseDate");

		if (purchaseDate != null) {
			setPurchaseDate(purchaseDate);
		}

		Double current_price = (Double)attributes.get("current_price");

		if (current_price != null) {
			setCurrent_price(current_price);
		}

		Double purchasedFx = (Double)attributes.get("purchasedFx");

		if (purchasedFx != null) {
			setPurchasedFx(purchasedFx);
		}

		Double current_fx = (Double)attributes.get("current_fx");

		if (current_fx != null) {
			setCurrent_fx(current_fx);
		}

		String baseCurrency = (String)attributes.get("baseCurrency");

		if (baseCurrency != null) {
			setBaseCurrency(baseCurrency);
		}

		String security_des = (String)attributes.get("security_des");

		if (security_des != null) {
			setSecurity_des(security_des);
		}

		Integer security_class_int = (Integer)attributes.get(
				"security_class_int");

		if (security_class_int != null) {
			setSecurity_class_int(security_class_int);
		}

		String security_class = (String)attributes.get("security_class");

		if (security_class != null) {
			setSecurity_class(security_class);
		}

		String security_typ = (String)attributes.get("security_typ");

		if (security_typ != null) {
			setSecurity_typ(security_typ);
		}

		String security_typ2 = (String)attributes.get("security_typ2");

		if (security_typ2 != null) {
			setSecurity_typ2(security_typ2);
		}

		String asset_class = (String)attributes.get("asset_class");

		if (asset_class != null) {
			setAsset_class(asset_class);
		}

		String asset_sub_class = (String)attributes.get("asset_sub_class");

		if (asset_sub_class != null) {
			setAsset_sub_class(asset_sub_class);
		}

		String parent_comp_name = (String)attributes.get("parent_comp_name");

		if (parent_comp_name != null) {
			setParent_comp_name(parent_comp_name);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		String countryName = (String)attributes.get("countryName");

		if (countryName != null) {
			setCountryName(countryName);
		}

		Long countryOfRisk = (Long)attributes.get("countryOfRisk");

		if (countryOfRisk != null) {
			setCountryOfRisk(countryOfRisk);
		}

		String countryOfRiskName = (String)attributes.get("countryOfRiskName");

		if (countryOfRiskName != null) {
			setCountryOfRiskName(countryOfRiskName);
		}

		String currency_ = (String)attributes.get("currency_");

		if (currency_ != null) {
			setCurrency_(currency_);
		}

		String currencyDesc = (String)attributes.get("currencyDesc");

		if (currencyDesc != null) {
			setCurrencyDesc(currencyDesc);
		}

		Double purchasedMarketValue = (Double)attributes.get(
				"purchasedMarketValue");

		if (purchasedMarketValue != null) {
			setPurchasedMarketValue(purchasedMarketValue);
		}

		Double currentMarketValue = (Double)attributes.get("currentMarketValue");

		if (currentMarketValue != null) {
			setCurrentMarketValue(currentMarketValue);
		}

		Double gain_loss = (Double)attributes.get("gain_loss");

		if (gain_loss != null) {
			setGain_loss(gain_loss);
		}

		Double gain_loss_percent = (Double)attributes.get("gain_loss_percent");

		if (gain_loss_percent != null) {
			setGain_loss_percent(gain_loss_percent);
		}

		Double fx_gain_loss = (Double)attributes.get("fx_gain_loss");

		if (fx_gain_loss != null) {
			setFx_gain_loss(fx_gain_loss);
		}

		Double income = (Double)attributes.get("income");

		if (income != null) {
			setIncome(income);
		}

		String currencySymbol = (String)attributes.get("currencySymbol");

		if (currencySymbol != null) {
			setCurrencySymbol(currencySymbol);
		}
	}

	@JSON
	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		_itemId = itemId;
	}

	@JSON
	@Override
	public long getPortfolioId() {
		return _portfolioId;
	}

	@Override
	public void setPortfolioId(long portfolioId) {
		_columnBitmask |= PORTFOLIOID_COLUMN_BITMASK;

		if (!_setOriginalPortfolioId) {
			_setOriginalPortfolioId = true;

			_originalPortfolioId = _portfolioId;
		}

		_portfolioId = portfolioId;
	}

	public long getOriginalPortfolioId() {
		return _originalPortfolioId;
	}

	@JSON
	@Override
	public String getInstitution() {
		if (_institution == null) {
			return StringPool.BLANK;
		}
		else {
			return _institution;
		}
	}

	@Override
	public void setInstitution(String institution) {
		_institution = institution;
	}

	@JSON
	@Override
	public long getAssetId() {
		return _assetId;
	}

	@Override
	public void setAssetId(long assetId) {
		_assetId = assetId;
	}

	@JSON
	@Override
	public String getSecurity_ticker() {
		if (_security_ticker == null) {
			return StringPool.BLANK;
		}
		else {
			return _security_ticker;
		}
	}

	@Override
	public void setSecurity_ticker(String security_ticker) {
		_security_ticker = security_ticker;
	}

	@JSON
	@Override
	public String getId_isin() {
		if (_id_isin == null) {
			return StringPool.BLANK;
		}
		else {
			return _id_isin;
		}
	}

	@Override
	public void setId_isin(String id_isin) {
		_id_isin = id_isin;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getIndustry_sector() {
		if (_industry_sector == null) {
			return StringPool.BLANK;
		}
		else {
			return _industry_sector;
		}
	}

	@Override
	public void setIndustry_sector(String industry_sector) {
		_industry_sector = industry_sector;
	}

	@JSON
	@Override
	public double getPurchaseQty() {
		return _purchaseQty;
	}

	@Override
	public void setPurchaseQty(double purchaseQty) {
		_purchaseQty = purchaseQty;
	}

	@JSON
	@Override
	public Date getPurchaseDate() {
		return _purchaseDate;
	}

	@Override
	public void setPurchaseDate(Date purchaseDate) {
		_purchaseDate = purchaseDate;
	}

	@JSON
	@Override
	public double getCurrent_price() {
		return _current_price;
	}

	@Override
	public void setCurrent_price(double current_price) {
		_current_price = current_price;
	}

	@JSON
	@Override
	public double getPurchasedFx() {
		return _purchasedFx;
	}

	@Override
	public void setPurchasedFx(double purchasedFx) {
		_purchasedFx = purchasedFx;
	}

	@JSON
	@Override
	public double getCurrent_fx() {
		return _current_fx;
	}

	@Override
	public void setCurrent_fx(double current_fx) {
		_current_fx = current_fx;
	}

	@JSON
	@Override
	public String getBaseCurrency() {
		if (_baseCurrency == null) {
			return StringPool.BLANK;
		}
		else {
			return _baseCurrency;
		}
	}

	@Override
	public void setBaseCurrency(String baseCurrency) {
		_baseCurrency = baseCurrency;
	}

	@JSON
	@Override
	public String getSecurity_des() {
		if (_security_des == null) {
			return StringPool.BLANK;
		}
		else {
			return _security_des;
		}
	}

	@Override
	public void setSecurity_des(String security_des) {
		_security_des = security_des;
	}

	@JSON
	@Override
	public int getSecurity_class_int() {
		return _security_class_int;
	}

	@Override
	public void setSecurity_class_int(int security_class_int) {
		_security_class_int = security_class_int;
	}

	@JSON
	@Override
	public String getSecurity_class() {
		if (_security_class == null) {
			return StringPool.BLANK;
		}
		else {
			return _security_class;
		}
	}

	@Override
	public void setSecurity_class(String security_class) {
		_security_class = security_class;
	}

	@JSON
	@Override
	public String getSecurity_typ() {
		if (_security_typ == null) {
			return StringPool.BLANK;
		}
		else {
			return _security_typ;
		}
	}

	@Override
	public void setSecurity_typ(String security_typ) {
		_security_typ = security_typ;
	}

	@JSON
	@Override
	public String getSecurity_typ2() {
		if (_security_typ2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _security_typ2;
		}
	}

	@Override
	public void setSecurity_typ2(String security_typ2) {
		_security_typ2 = security_typ2;
	}

	@JSON
	@Override
	public String getAsset_class() {
		if (_asset_class == null) {
			return StringPool.BLANK;
		}
		else {
			return _asset_class;
		}
	}

	@Override
	public void setAsset_class(String asset_class) {
		_asset_class = asset_class;
	}

	@JSON
	@Override
	public String getAsset_sub_class() {
		if (_asset_sub_class == null) {
			return StringPool.BLANK;
		}
		else {
			return _asset_sub_class;
		}
	}

	@Override
	public void setAsset_sub_class(String asset_sub_class) {
		_asset_sub_class = asset_sub_class;
	}

	@JSON
	@Override
	public String getParent_comp_name() {
		if (_parent_comp_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _parent_comp_name;
		}
	}

	@Override
	public void setParent_comp_name(String parent_comp_name) {
		_parent_comp_name = parent_comp_name;
	}

	@JSON
	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_countryId = countryId;
	}

	@JSON
	@Override
	public String getCountryName() {
		if (_countryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryName;
		}
	}

	@Override
	public void setCountryName(String countryName) {
		_countryName = countryName;
	}

	@JSON
	@Override
	public long getCountryOfRisk() {
		return _countryOfRisk;
	}

	@Override
	public void setCountryOfRisk(long countryOfRisk) {
		_countryOfRisk = countryOfRisk;
	}

	@JSON
	@Override
	public String getCountryOfRiskName() {
		if (_countryOfRiskName == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryOfRiskName;
		}
	}

	@Override
	public void setCountryOfRiskName(String countryOfRiskName) {
		_countryOfRiskName = countryOfRiskName;
	}

	@JSON
	@Override
	public String getCurrency_() {
		if (_currency_ == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency_;
		}
	}

	@Override
	public void setCurrency_(String currency_) {
		_currency_ = currency_;
	}

	@JSON
	@Override
	public String getCurrencyDesc() {
		if (_currencyDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _currencyDesc;
		}
	}

	@Override
	public void setCurrencyDesc(String currencyDesc) {
		_currencyDesc = currencyDesc;
	}

	@JSON
	@Override
	public double getPurchasedMarketValue() {
		return _purchasedMarketValue;
	}

	@Override
	public void setPurchasedMarketValue(double purchasedMarketValue) {
		_purchasedMarketValue = purchasedMarketValue;
	}

	@JSON
	@Override
	public double getCurrentMarketValue() {
		return _currentMarketValue;
	}

	@Override
	public void setCurrentMarketValue(double currentMarketValue) {
		_currentMarketValue = currentMarketValue;
	}

	@JSON
	@Override
	public double getGain_loss() {
		return _gain_loss;
	}

	@Override
	public void setGain_loss(double gain_loss) {
		_gain_loss = gain_loss;
	}

	@JSON
	@Override
	public double getGain_loss_percent() {
		return _gain_loss_percent;
	}

	@Override
	public void setGain_loss_percent(double gain_loss_percent) {
		_gain_loss_percent = gain_loss_percent;
	}

	@JSON
	@Override
	public double getFx_gain_loss() {
		return _fx_gain_loss;
	}

	@Override
	public void setFx_gain_loss(double fx_gain_loss) {
		_fx_gain_loss = fx_gain_loss;
	}

	@JSON
	@Override
	public double getIncome() {
		return _income;
	}

	@Override
	public void setIncome(double income) {
		_income = income;
	}

	@JSON
	@Override
	public String getCurrencySymbol() {
		if (_currencySymbol == null) {
			return StringPool.BLANK;
		}
		else {
			return _currencySymbol;
		}
	}

	@Override
	public void setCurrencySymbol(String currencySymbol) {
		_currencySymbol = currencySymbol;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MyResult.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MyResult toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MyResult)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MyResultImpl myResultImpl = new MyResultImpl();

		myResultImpl.setItemId(getItemId());
		myResultImpl.setPortfolioId(getPortfolioId());
		myResultImpl.setInstitution(getInstitution());
		myResultImpl.setAssetId(getAssetId());
		myResultImpl.setSecurity_ticker(getSecurity_ticker());
		myResultImpl.setId_isin(getId_isin());
		myResultImpl.setName(getName());
		myResultImpl.setIndustry_sector(getIndustry_sector());
		myResultImpl.setPurchaseQty(getPurchaseQty());
		myResultImpl.setPurchaseDate(getPurchaseDate());
		myResultImpl.setCurrent_price(getCurrent_price());
		myResultImpl.setPurchasedFx(getPurchasedFx());
		myResultImpl.setCurrent_fx(getCurrent_fx());
		myResultImpl.setBaseCurrency(getBaseCurrency());
		myResultImpl.setSecurity_des(getSecurity_des());
		myResultImpl.setSecurity_class_int(getSecurity_class_int());
		myResultImpl.setSecurity_class(getSecurity_class());
		myResultImpl.setSecurity_typ(getSecurity_typ());
		myResultImpl.setSecurity_typ2(getSecurity_typ2());
		myResultImpl.setAsset_class(getAsset_class());
		myResultImpl.setAsset_sub_class(getAsset_sub_class());
		myResultImpl.setParent_comp_name(getParent_comp_name());
		myResultImpl.setCountryId(getCountryId());
		myResultImpl.setCountryName(getCountryName());
		myResultImpl.setCountryOfRisk(getCountryOfRisk());
		myResultImpl.setCountryOfRiskName(getCountryOfRiskName());
		myResultImpl.setCurrency_(getCurrency_());
		myResultImpl.setCurrencyDesc(getCurrencyDesc());
		myResultImpl.setPurchasedMarketValue(getPurchasedMarketValue());
		myResultImpl.setCurrentMarketValue(getCurrentMarketValue());
		myResultImpl.setGain_loss(getGain_loss());
		myResultImpl.setGain_loss_percent(getGain_loss_percent());
		myResultImpl.setFx_gain_loss(getFx_gain_loss());
		myResultImpl.setIncome(getIncome());
		myResultImpl.setCurrencySymbol(getCurrencySymbol());

		myResultImpl.resetOriginalValues();

		return myResultImpl;
	}

	@Override
	public int compareTo(MyResult myResult) {
		long primaryKey = myResult.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MyResult)) {
			return false;
		}

		MyResult myResult = (MyResult)obj;

		long primaryKey = myResult.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MyResultModelImpl myResultModelImpl = this;

		myResultModelImpl._originalPortfolioId = myResultModelImpl._portfolioId;

		myResultModelImpl._setOriginalPortfolioId = false;

		myResultModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MyResult> toCacheModel() {
		MyResultCacheModel myResultCacheModel = new MyResultCacheModel();

		myResultCacheModel.itemId = getItemId();

		myResultCacheModel.portfolioId = getPortfolioId();

		myResultCacheModel.institution = getInstitution();

		String institution = myResultCacheModel.institution;

		if ((institution != null) && (institution.length() == 0)) {
			myResultCacheModel.institution = null;
		}

		myResultCacheModel.assetId = getAssetId();

		myResultCacheModel.security_ticker = getSecurity_ticker();

		String security_ticker = myResultCacheModel.security_ticker;

		if ((security_ticker != null) && (security_ticker.length() == 0)) {
			myResultCacheModel.security_ticker = null;
		}

		myResultCacheModel.id_isin = getId_isin();

		String id_isin = myResultCacheModel.id_isin;

		if ((id_isin != null) && (id_isin.length() == 0)) {
			myResultCacheModel.id_isin = null;
		}

		myResultCacheModel.name = getName();

		String name = myResultCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			myResultCacheModel.name = null;
		}

		myResultCacheModel.industry_sector = getIndustry_sector();

		String industry_sector = myResultCacheModel.industry_sector;

		if ((industry_sector != null) && (industry_sector.length() == 0)) {
			myResultCacheModel.industry_sector = null;
		}

		myResultCacheModel.purchaseQty = getPurchaseQty();

		Date purchaseDate = getPurchaseDate();

		if (purchaseDate != null) {
			myResultCacheModel.purchaseDate = purchaseDate.getTime();
		}
		else {
			myResultCacheModel.purchaseDate = Long.MIN_VALUE;
		}

		myResultCacheModel.current_price = getCurrent_price();

		myResultCacheModel.purchasedFx = getPurchasedFx();

		myResultCacheModel.current_fx = getCurrent_fx();

		myResultCacheModel.baseCurrency = getBaseCurrency();

		String baseCurrency = myResultCacheModel.baseCurrency;

		if ((baseCurrency != null) && (baseCurrency.length() == 0)) {
			myResultCacheModel.baseCurrency = null;
		}

		myResultCacheModel.security_des = getSecurity_des();

		String security_des = myResultCacheModel.security_des;

		if ((security_des != null) && (security_des.length() == 0)) {
			myResultCacheModel.security_des = null;
		}

		myResultCacheModel.security_class_int = getSecurity_class_int();

		myResultCacheModel.security_class = getSecurity_class();

		String security_class = myResultCacheModel.security_class;

		if ((security_class != null) && (security_class.length() == 0)) {
			myResultCacheModel.security_class = null;
		}

		myResultCacheModel.security_typ = getSecurity_typ();

		String security_typ = myResultCacheModel.security_typ;

		if ((security_typ != null) && (security_typ.length() == 0)) {
			myResultCacheModel.security_typ = null;
		}

		myResultCacheModel.security_typ2 = getSecurity_typ2();

		String security_typ2 = myResultCacheModel.security_typ2;

		if ((security_typ2 != null) && (security_typ2.length() == 0)) {
			myResultCacheModel.security_typ2 = null;
		}

		myResultCacheModel.asset_class = getAsset_class();

		String asset_class = myResultCacheModel.asset_class;

		if ((asset_class != null) && (asset_class.length() == 0)) {
			myResultCacheModel.asset_class = null;
		}

		myResultCacheModel.asset_sub_class = getAsset_sub_class();

		String asset_sub_class = myResultCacheModel.asset_sub_class;

		if ((asset_sub_class != null) && (asset_sub_class.length() == 0)) {
			myResultCacheModel.asset_sub_class = null;
		}

		myResultCacheModel.parent_comp_name = getParent_comp_name();

		String parent_comp_name = myResultCacheModel.parent_comp_name;

		if ((parent_comp_name != null) && (parent_comp_name.length() == 0)) {
			myResultCacheModel.parent_comp_name = null;
		}

		myResultCacheModel.countryId = getCountryId();

		myResultCacheModel.countryName = getCountryName();

		String countryName = myResultCacheModel.countryName;

		if ((countryName != null) && (countryName.length() == 0)) {
			myResultCacheModel.countryName = null;
		}

		myResultCacheModel.countryOfRisk = getCountryOfRisk();

		myResultCacheModel.countryOfRiskName = getCountryOfRiskName();

		String countryOfRiskName = myResultCacheModel.countryOfRiskName;

		if ((countryOfRiskName != null) && (countryOfRiskName.length() == 0)) {
			myResultCacheModel.countryOfRiskName = null;
		}

		myResultCacheModel.currency_ = getCurrency_();

		String currency_ = myResultCacheModel.currency_;

		if ((currency_ != null) && (currency_.length() == 0)) {
			myResultCacheModel.currency_ = null;
		}

		myResultCacheModel.currencyDesc = getCurrencyDesc();

		String currencyDesc = myResultCacheModel.currencyDesc;

		if ((currencyDesc != null) && (currencyDesc.length() == 0)) {
			myResultCacheModel.currencyDesc = null;
		}

		myResultCacheModel.purchasedMarketValue = getPurchasedMarketValue();

		myResultCacheModel.currentMarketValue = getCurrentMarketValue();

		myResultCacheModel.gain_loss = getGain_loss();

		myResultCacheModel.gain_loss_percent = getGain_loss_percent();

		myResultCacheModel.fx_gain_loss = getFx_gain_loss();

		myResultCacheModel.income = getIncome();

		myResultCacheModel.currencySymbol = getCurrencySymbol();

		String currencySymbol = myResultCacheModel.currencySymbol;

		if ((currencySymbol != null) && (currencySymbol.length() == 0)) {
			myResultCacheModel.currencySymbol = null;
		}

		return myResultCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(71);

		sb.append("{itemId=");
		sb.append(getItemId());
		sb.append(", portfolioId=");
		sb.append(getPortfolioId());
		sb.append(", institution=");
		sb.append(getInstitution());
		sb.append(", assetId=");
		sb.append(getAssetId());
		sb.append(", security_ticker=");
		sb.append(getSecurity_ticker());
		sb.append(", id_isin=");
		sb.append(getId_isin());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", industry_sector=");
		sb.append(getIndustry_sector());
		sb.append(", purchaseQty=");
		sb.append(getPurchaseQty());
		sb.append(", purchaseDate=");
		sb.append(getPurchaseDate());
		sb.append(", current_price=");
		sb.append(getCurrent_price());
		sb.append(", purchasedFx=");
		sb.append(getPurchasedFx());
		sb.append(", current_fx=");
		sb.append(getCurrent_fx());
		sb.append(", baseCurrency=");
		sb.append(getBaseCurrency());
		sb.append(", security_des=");
		sb.append(getSecurity_des());
		sb.append(", security_class_int=");
		sb.append(getSecurity_class_int());
		sb.append(", security_class=");
		sb.append(getSecurity_class());
		sb.append(", security_typ=");
		sb.append(getSecurity_typ());
		sb.append(", security_typ2=");
		sb.append(getSecurity_typ2());
		sb.append(", asset_class=");
		sb.append(getAsset_class());
		sb.append(", asset_sub_class=");
		sb.append(getAsset_sub_class());
		sb.append(", parent_comp_name=");
		sb.append(getParent_comp_name());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", countryName=");
		sb.append(getCountryName());
		sb.append(", countryOfRisk=");
		sb.append(getCountryOfRisk());
		sb.append(", countryOfRiskName=");
		sb.append(getCountryOfRiskName());
		sb.append(", currency_=");
		sb.append(getCurrency_());
		sb.append(", currencyDesc=");
		sb.append(getCurrencyDesc());
		sb.append(", purchasedMarketValue=");
		sb.append(getPurchasedMarketValue());
		sb.append(", currentMarketValue=");
		sb.append(getCurrentMarketValue());
		sb.append(", gain_loss=");
		sb.append(getGain_loss());
		sb.append(", gain_loss_percent=");
		sb.append(getGain_loss_percent());
		sb.append(", fx_gain_loss=");
		sb.append(getFx_gain_loss());
		sb.append(", income=");
		sb.append(getIncome());
		sb.append(", currencySymbol=");
		sb.append(getCurrencySymbol());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(109);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.MyResult");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portfolioId</column-name><column-value><![CDATA[");
		sb.append(getPortfolioId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>institution</column-name><column-value><![CDATA[");
		sb.append(getInstitution());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetId</column-name><column-value><![CDATA[");
		sb.append(getAssetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>security_ticker</column-name><column-value><![CDATA[");
		sb.append(getSecurity_ticker());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_isin</column-name><column-value><![CDATA[");
		sb.append(getId_isin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>industry_sector</column-name><column-value><![CDATA[");
		sb.append(getIndustry_sector());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchaseQty</column-name><column-value><![CDATA[");
		sb.append(getPurchaseQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchaseDate</column-name><column-value><![CDATA[");
		sb.append(getPurchaseDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>current_price</column-name><column-value><![CDATA[");
		sb.append(getCurrent_price());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchasedFx</column-name><column-value><![CDATA[");
		sb.append(getPurchasedFx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>current_fx</column-name><column-value><![CDATA[");
		sb.append(getCurrent_fx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baseCurrency</column-name><column-value><![CDATA[");
		sb.append(getBaseCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>security_des</column-name><column-value><![CDATA[");
		sb.append(getSecurity_des());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>security_class_int</column-name><column-value><![CDATA[");
		sb.append(getSecurity_class_int());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>security_class</column-name><column-value><![CDATA[");
		sb.append(getSecurity_class());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>security_typ</column-name><column-value><![CDATA[");
		sb.append(getSecurity_typ());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>security_typ2</column-name><column-value><![CDATA[");
		sb.append(getSecurity_typ2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>asset_class</column-name><column-value><![CDATA[");
		sb.append(getAsset_class());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>asset_sub_class</column-name><column-value><![CDATA[");
		sb.append(getAsset_sub_class());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parent_comp_name</column-name><column-value><![CDATA[");
		sb.append(getParent_comp_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryName</column-name><column-value><![CDATA[");
		sb.append(getCountryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryOfRisk</column-name><column-value><![CDATA[");
		sb.append(getCountryOfRisk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryOfRiskName</column-name><column-value><![CDATA[");
		sb.append(getCountryOfRiskName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency_</column-name><column-value><![CDATA[");
		sb.append(getCurrency_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencyDesc</column-name><column-value><![CDATA[");
		sb.append(getCurrencyDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchasedMarketValue</column-name><column-value><![CDATA[");
		sb.append(getPurchasedMarketValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentMarketValue</column-name><column-value><![CDATA[");
		sb.append(getCurrentMarketValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gain_loss</column-name><column-value><![CDATA[");
		sb.append(getGain_loss());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gain_loss_percent</column-name><column-value><![CDATA[");
		sb.append(getGain_loss_percent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fx_gain_loss</column-name><column-value><![CDATA[");
		sb.append(getFx_gain_loss());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>income</column-name><column-value><![CDATA[");
		sb.append(getIncome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencySymbol</column-name><column-value><![CDATA[");
		sb.append(getCurrencySymbol());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MyResult.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MyResult.class
		};
	private long _itemId;
	private long _portfolioId;
	private long _originalPortfolioId;
	private boolean _setOriginalPortfolioId;
	private String _institution;
	private long _assetId;
	private String _security_ticker;
	private String _id_isin;
	private String _name;
	private String _industry_sector;
	private double _purchaseQty;
	private Date _purchaseDate;
	private double _current_price;
	private double _purchasedFx;
	private double _current_fx;
	private String _baseCurrency;
	private String _security_des;
	private int _security_class_int;
	private String _security_class;
	private String _security_typ;
	private String _security_typ2;
	private String _asset_class;
	private String _asset_sub_class;
	private String _parent_comp_name;
	private long _countryId;
	private String _countryName;
	private long _countryOfRisk;
	private String _countryOfRiskName;
	private String _currency_;
	private String _currencyDesc;
	private double _purchasedMarketValue;
	private double _currentMarketValue;
	private double _gain_loss;
	private double _gain_loss_percent;
	private double _fx_gain_loss;
	private double _income;
	private String _currencySymbol;
	private long _columnBitmask;
	private MyResult _escapedModel;
}