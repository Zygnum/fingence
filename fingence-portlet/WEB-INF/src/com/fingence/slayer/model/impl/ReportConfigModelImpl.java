/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.ReportConfig;
import com.fingence.slayer.model.ReportConfigModel;
import com.fingence.slayer.model.ReportConfigSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ReportConfig service. Represents a row in the &quot;fing_ReportConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.ReportConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReportConfigImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see ReportConfigImpl
 * @see com.fingence.slayer.model.ReportConfig
 * @see com.fingence.slayer.model.ReportConfigModel
 * @generated
 */
@JSON(strict = true)
public class ReportConfigModelImpl extends BaseModelImpl<ReportConfig>
	implements ReportConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a report config model instance should use the {@link com.fingence.slayer.model.ReportConfig} interface instead.
	 */
	public static final String TABLE_NAME = "fing_ReportConfig";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recId", Types.BIGINT },
			{ "reportId", Types.BIGINT },
			{ "enabled", Types.BOOLEAN },
			{ "classPK", Types.BIGINT },
			{ "classNameId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_ReportConfig (recId LONG not null primary key,reportId LONG,enabled BOOLEAN,classPK LONG,classNameId LONG)";
	public static final String TABLE_SQL_DROP = "drop table fing_ReportConfig";
	public static final String ORDER_BY_JPQL = " ORDER BY reportConfig.recId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_ReportConfig.recId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.ReportConfig"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.ReportConfig"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fingence.slayer.model.ReportConfig"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long ENABLED_COLUMN_BITMASK = 4L;
	public static long REPORTID_COLUMN_BITMASK = 8L;
	public static long RECID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ReportConfig toModel(ReportConfigSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ReportConfig model = new ReportConfigImpl();

		model.setRecId(soapModel.getRecId());
		model.setReportId(soapModel.getReportId());
		model.setEnabled(soapModel.getEnabled());
		model.setClassPK(soapModel.getClassPK());
		model.setClassNameId(soapModel.getClassNameId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ReportConfig> toModels(ReportConfigSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ReportConfig> models = new ArrayList<ReportConfig>(soapModels.length);

		for (ReportConfigSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.ReportConfig"));

	public ReportConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ReportConfig.class;
	}

	@Override
	public String getModelClassName() {
		return ReportConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recId", getRecId());
		attributes.put("reportId", getReportId());
		attributes.put("enabled", getEnabled());
		attributes.put("classPK", getClassPK());
		attributes.put("classNameId", getClassNameId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long recId = (Long)attributes.get("recId");

		if (recId != null) {
			setRecId(recId);
		}

		Long reportId = (Long)attributes.get("reportId");

		if (reportId != null) {
			setReportId(reportId);
		}

		Boolean enabled = (Boolean)attributes.get("enabled");

		if (enabled != null) {
			setEnabled(enabled);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}
	}

	@JSON
	@Override
	public long getRecId() {
		return _recId;
	}

	@Override
	public void setRecId(long recId) {
		_recId = recId;
	}

	@JSON
	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		_columnBitmask |= REPORTID_COLUMN_BITMASK;

		if (!_setOriginalReportId) {
			_setOriginalReportId = true;

			_originalReportId = _reportId;
		}

		_reportId = reportId;
	}

	public long getOriginalReportId() {
		return _originalReportId;
	}

	@JSON
	@Override
	public boolean getEnabled() {
		return _enabled;
	}

	@Override
	public boolean isEnabled() {
		return _enabled;
	}

	@Override
	public void setEnabled(boolean enabled) {
		_columnBitmask |= ENABLED_COLUMN_BITMASK;

		if (!_setOriginalEnabled) {
			_setOriginalEnabled = true;

			_originalEnabled = _enabled;
		}

		_enabled = enabled;
	}

	public boolean getOriginalEnabled() {
		return _originalEnabled;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ReportConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ReportConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ReportConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReportConfigImpl reportConfigImpl = new ReportConfigImpl();

		reportConfigImpl.setRecId(getRecId());
		reportConfigImpl.setReportId(getReportId());
		reportConfigImpl.setEnabled(getEnabled());
		reportConfigImpl.setClassPK(getClassPK());
		reportConfigImpl.setClassNameId(getClassNameId());

		reportConfigImpl.resetOriginalValues();

		return reportConfigImpl;
	}

	@Override
	public int compareTo(ReportConfig reportConfig) {
		long primaryKey = reportConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ReportConfig)) {
			return false;
		}

		ReportConfig reportConfig = (ReportConfig)obj;

		long primaryKey = reportConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ReportConfigModelImpl reportConfigModelImpl = this;

		reportConfigModelImpl._originalReportId = reportConfigModelImpl._reportId;

		reportConfigModelImpl._setOriginalReportId = false;

		reportConfigModelImpl._originalEnabled = reportConfigModelImpl._enabled;

		reportConfigModelImpl._setOriginalEnabled = false;

		reportConfigModelImpl._originalClassPK = reportConfigModelImpl._classPK;

		reportConfigModelImpl._setOriginalClassPK = false;

		reportConfigModelImpl._originalClassNameId = reportConfigModelImpl._classNameId;

		reportConfigModelImpl._setOriginalClassNameId = false;

		reportConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ReportConfig> toCacheModel() {
		ReportConfigCacheModel reportConfigCacheModel = new ReportConfigCacheModel();

		reportConfigCacheModel.recId = getRecId();

		reportConfigCacheModel.reportId = getReportId();

		reportConfigCacheModel.enabled = getEnabled();

		reportConfigCacheModel.classPK = getClassPK();

		reportConfigCacheModel.classNameId = getClassNameId();

		return reportConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{recId=");
		sb.append(getRecId());
		sb.append(", reportId=");
		sb.append(getReportId());
		sb.append(", enabled=");
		sb.append(getEnabled());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.ReportConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recId</column-name><column-value><![CDATA[");
		sb.append(getRecId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportId</column-name><column-value><![CDATA[");
		sb.append(getReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enabled</column-name><column-value><![CDATA[");
		sb.append(getEnabled());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ReportConfig.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ReportConfig.class
		};
	private long _recId;
	private long _reportId;
	private long _originalReportId;
	private boolean _setOriginalReportId;
	private boolean _enabled;
	private boolean _originalEnabled;
	private boolean _setOriginalEnabled;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _columnBitmask;
	private ReportConfig _escapedModel;
}