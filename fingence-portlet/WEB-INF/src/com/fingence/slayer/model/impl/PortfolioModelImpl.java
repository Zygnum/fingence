/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.Portfolio;
import com.fingence.slayer.model.PortfolioModel;
import com.fingence.slayer.model.PortfolioSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Portfolio service. Represents a row in the &quot;fing_Portfolio&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.PortfolioModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortfolioImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see PortfolioImpl
 * @see com.fingence.slayer.model.Portfolio
 * @see com.fingence.slayer.model.PortfolioModel
 * @generated
 */
@JSON(strict = true)
public class PortfolioModelImpl extends BaseModelImpl<Portfolio>
	implements PortfolioModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a portfolio model instance should use the {@link com.fingence.slayer.model.Portfolio} interface instead.
	 */
	public static final String TABLE_NAME = "fing_Portfolio";
	public static final Object[][] TABLE_COLUMNS = {
			{ "portfolioId", Types.BIGINT },
			{ "portfolioName", Types.VARCHAR },
			{ "investorId", Types.BIGINT },
			{ "wealthAdvisorId", Types.BIGINT },
			{ "relationshipManagerId", Types.BIGINT },
			{ "institutionId", Types.BIGINT },
			{ "trial", Types.BOOLEAN },
			{ "primary_", Types.BOOLEAN },
			{ "social", Types.BOOLEAN },
			{ "baseCurrency", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_Portfolio (portfolioId LONG not null primary key,portfolioName VARCHAR(75) null,investorId LONG,wealthAdvisorId LONG,relationshipManagerId LONG,institutionId LONG,trial BOOLEAN,primary_ BOOLEAN,social BOOLEAN,baseCurrency VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companyId LONG,userId LONG,userName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table fing_Portfolio";
	public static final String ORDER_BY_JPQL = " ORDER BY portfolio.primary DESC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_Portfolio.primary_ DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.Portfolio"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.Portfolio"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fingence.slayer.model.Portfolio"),
			true);
	public static long INSTITUTIONID_COLUMN_BITMASK = 1L;
	public static long INVESTORID_COLUMN_BITMASK = 2L;
	public static long RELATIONSHIPMANAGERID_COLUMN_BITMASK = 4L;
	public static long WEALTHADVISORID_COLUMN_BITMASK = 8L;
	public static long PRIMARY_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Portfolio toModel(PortfolioSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Portfolio model = new PortfolioImpl();

		model.setPortfolioId(soapModel.getPortfolioId());
		model.setPortfolioName(soapModel.getPortfolioName());
		model.setInvestorId(soapModel.getInvestorId());
		model.setWealthAdvisorId(soapModel.getWealthAdvisorId());
		model.setRelationshipManagerId(soapModel.getRelationshipManagerId());
		model.setInstitutionId(soapModel.getInstitutionId());
		model.setTrial(soapModel.getTrial());
		model.setPrimary(soapModel.getPrimary());
		model.setSocial(soapModel.getSocial());
		model.setBaseCurrency(soapModel.getBaseCurrency());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Portfolio> toModels(PortfolioSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Portfolio> models = new ArrayList<Portfolio>(soapModels.length);

		for (PortfolioSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.Portfolio"));

	public PortfolioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _portfolioId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPortfolioId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _portfolioId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Portfolio.class;
	}

	@Override
	public String getModelClassName() {
		return Portfolio.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("portfolioId", getPortfolioId());
		attributes.put("portfolioName", getPortfolioName());
		attributes.put("investorId", getInvestorId());
		attributes.put("wealthAdvisorId", getWealthAdvisorId());
		attributes.put("relationshipManagerId", getRelationshipManagerId());
		attributes.put("institutionId", getInstitutionId());
		attributes.put("trial", getTrial());
		attributes.put("primary", getPrimary());
		attributes.put("social", getSocial());
		attributes.put("baseCurrency", getBaseCurrency());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long portfolioId = (Long)attributes.get("portfolioId");

		if (portfolioId != null) {
			setPortfolioId(portfolioId);
		}

		String portfolioName = (String)attributes.get("portfolioName");

		if (portfolioName != null) {
			setPortfolioName(portfolioName);
		}

		Long investorId = (Long)attributes.get("investorId");

		if (investorId != null) {
			setInvestorId(investorId);
		}

		Long wealthAdvisorId = (Long)attributes.get("wealthAdvisorId");

		if (wealthAdvisorId != null) {
			setWealthAdvisorId(wealthAdvisorId);
		}

		Long relationshipManagerId = (Long)attributes.get(
				"relationshipManagerId");

		if (relationshipManagerId != null) {
			setRelationshipManagerId(relationshipManagerId);
		}

		Long institutionId = (Long)attributes.get("institutionId");

		if (institutionId != null) {
			setInstitutionId(institutionId);
		}

		Boolean trial = (Boolean)attributes.get("trial");

		if (trial != null) {
			setTrial(trial);
		}

		Boolean primary = (Boolean)attributes.get("primary");

		if (primary != null) {
			setPrimary(primary);
		}

		Boolean social = (Boolean)attributes.get("social");

		if (social != null) {
			setSocial(social);
		}

		String baseCurrency = (String)attributes.get("baseCurrency");

		if (baseCurrency != null) {
			setBaseCurrency(baseCurrency);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}
	}

	@JSON
	@Override
	public long getPortfolioId() {
		return _portfolioId;
	}

	@Override
	public void setPortfolioId(long portfolioId) {
		_portfolioId = portfolioId;
	}

	@JSON
	@Override
	public String getPortfolioName() {
		if (_portfolioName == null) {
			return StringPool.BLANK;
		}
		else {
			return _portfolioName;
		}
	}

	@Override
	public void setPortfolioName(String portfolioName) {
		_portfolioName = portfolioName;
	}

	@JSON
	@Override
	public long getInvestorId() {
		return _investorId;
	}

	@Override
	public void setInvestorId(long investorId) {
		_columnBitmask |= INVESTORID_COLUMN_BITMASK;

		if (!_setOriginalInvestorId) {
			_setOriginalInvestorId = true;

			_originalInvestorId = _investorId;
		}

		_investorId = investorId;
	}

	public long getOriginalInvestorId() {
		return _originalInvestorId;
	}

	@JSON
	@Override
	public long getWealthAdvisorId() {
		return _wealthAdvisorId;
	}

	@Override
	public void setWealthAdvisorId(long wealthAdvisorId) {
		_columnBitmask |= WEALTHADVISORID_COLUMN_BITMASK;

		if (!_setOriginalWealthAdvisorId) {
			_setOriginalWealthAdvisorId = true;

			_originalWealthAdvisorId = _wealthAdvisorId;
		}

		_wealthAdvisorId = wealthAdvisorId;
	}

	public long getOriginalWealthAdvisorId() {
		return _originalWealthAdvisorId;
	}

	@JSON
	@Override
	public long getRelationshipManagerId() {
		return _relationshipManagerId;
	}

	@Override
	public void setRelationshipManagerId(long relationshipManagerId) {
		_columnBitmask |= RELATIONSHIPMANAGERID_COLUMN_BITMASK;

		if (!_setOriginalRelationshipManagerId) {
			_setOriginalRelationshipManagerId = true;

			_originalRelationshipManagerId = _relationshipManagerId;
		}

		_relationshipManagerId = relationshipManagerId;
	}

	public long getOriginalRelationshipManagerId() {
		return _originalRelationshipManagerId;
	}

	@JSON
	@Override
	public long getInstitutionId() {
		return _institutionId;
	}

	@Override
	public void setInstitutionId(long institutionId) {
		_columnBitmask |= INSTITUTIONID_COLUMN_BITMASK;

		if (!_setOriginalInstitutionId) {
			_setOriginalInstitutionId = true;

			_originalInstitutionId = _institutionId;
		}

		_institutionId = institutionId;
	}

	public long getOriginalInstitutionId() {
		return _originalInstitutionId;
	}

	@JSON
	@Override
	public boolean getTrial() {
		return _trial;
	}

	@Override
	public boolean isTrial() {
		return _trial;
	}

	@Override
	public void setTrial(boolean trial) {
		_trial = trial;
	}

	@JSON
	@Override
	public boolean getPrimary() {
		return _primary;
	}

	@Override
	public boolean isPrimary() {
		return _primary;
	}

	@Override
	public void setPrimary(boolean primary) {
		_columnBitmask = -1L;

		_primary = primary;
	}

	@JSON
	@Override
	public boolean getSocial() {
		return _social;
	}

	@Override
	public boolean isSocial() {
		return _social;
	}

	@Override
	public void setSocial(boolean social) {
		_social = social;
	}

	@JSON
	@Override
	public String getBaseCurrency() {
		if (_baseCurrency == null) {
			return StringPool.BLANK;
		}
		else {
			return _baseCurrency;
		}
	}

	@Override
	public void setBaseCurrency(String baseCurrency) {
		_baseCurrency = baseCurrency;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Portfolio.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Portfolio toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Portfolio)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PortfolioImpl portfolioImpl = new PortfolioImpl();

		portfolioImpl.setPortfolioId(getPortfolioId());
		portfolioImpl.setPortfolioName(getPortfolioName());
		portfolioImpl.setInvestorId(getInvestorId());
		portfolioImpl.setWealthAdvisorId(getWealthAdvisorId());
		portfolioImpl.setRelationshipManagerId(getRelationshipManagerId());
		portfolioImpl.setInstitutionId(getInstitutionId());
		portfolioImpl.setTrial(getTrial());
		portfolioImpl.setPrimary(getPrimary());
		portfolioImpl.setSocial(getSocial());
		portfolioImpl.setBaseCurrency(getBaseCurrency());
		portfolioImpl.setCreateDate(getCreateDate());
		portfolioImpl.setModifiedDate(getModifiedDate());
		portfolioImpl.setCompanyId(getCompanyId());
		portfolioImpl.setUserId(getUserId());
		portfolioImpl.setUserName(getUserName());

		portfolioImpl.resetOriginalValues();

		return portfolioImpl;
	}

	@Override
	public int compareTo(Portfolio portfolio) {
		int value = 0;

		if (getPrimary() == portfolio.getPrimary()) {
			value = -1;
		}
		else if (getPrimary() != portfolio.getPrimary()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Portfolio)) {
			return false;
		}

		Portfolio portfolio = (Portfolio)obj;

		long primaryKey = portfolio.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PortfolioModelImpl portfolioModelImpl = this;

		portfolioModelImpl._originalInvestorId = portfolioModelImpl._investorId;

		portfolioModelImpl._setOriginalInvestorId = false;

		portfolioModelImpl._originalWealthAdvisorId = portfolioModelImpl._wealthAdvisorId;

		portfolioModelImpl._setOriginalWealthAdvisorId = false;

		portfolioModelImpl._originalRelationshipManagerId = portfolioModelImpl._relationshipManagerId;

		portfolioModelImpl._setOriginalRelationshipManagerId = false;

		portfolioModelImpl._originalInstitutionId = portfolioModelImpl._institutionId;

		portfolioModelImpl._setOriginalInstitutionId = false;

		portfolioModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Portfolio> toCacheModel() {
		PortfolioCacheModel portfolioCacheModel = new PortfolioCacheModel();

		portfolioCacheModel.portfolioId = getPortfolioId();

		portfolioCacheModel.portfolioName = getPortfolioName();

		String portfolioName = portfolioCacheModel.portfolioName;

		if ((portfolioName != null) && (portfolioName.length() == 0)) {
			portfolioCacheModel.portfolioName = null;
		}

		portfolioCacheModel.investorId = getInvestorId();

		portfolioCacheModel.wealthAdvisorId = getWealthAdvisorId();

		portfolioCacheModel.relationshipManagerId = getRelationshipManagerId();

		portfolioCacheModel.institutionId = getInstitutionId();

		portfolioCacheModel.trial = getTrial();

		portfolioCacheModel.primary = getPrimary();

		portfolioCacheModel.social = getSocial();

		portfolioCacheModel.baseCurrency = getBaseCurrency();

		String baseCurrency = portfolioCacheModel.baseCurrency;

		if ((baseCurrency != null) && (baseCurrency.length() == 0)) {
			portfolioCacheModel.baseCurrency = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			portfolioCacheModel.createDate = createDate.getTime();
		}
		else {
			portfolioCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			portfolioCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			portfolioCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		portfolioCacheModel.companyId = getCompanyId();

		portfolioCacheModel.userId = getUserId();

		portfolioCacheModel.userName = getUserName();

		String userName = portfolioCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			portfolioCacheModel.userName = null;
		}

		return portfolioCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{portfolioId=");
		sb.append(getPortfolioId());
		sb.append(", portfolioName=");
		sb.append(getPortfolioName());
		sb.append(", investorId=");
		sb.append(getInvestorId());
		sb.append(", wealthAdvisorId=");
		sb.append(getWealthAdvisorId());
		sb.append(", relationshipManagerId=");
		sb.append(getRelationshipManagerId());
		sb.append(", institutionId=");
		sb.append(getInstitutionId());
		sb.append(", trial=");
		sb.append(getTrial());
		sb.append(", primary=");
		sb.append(getPrimary());
		sb.append(", social=");
		sb.append(getSocial());
		sb.append(", baseCurrency=");
		sb.append(getBaseCurrency());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.Portfolio");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>portfolioId</column-name><column-value><![CDATA[");
		sb.append(getPortfolioId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portfolioName</column-name><column-value><![CDATA[");
		sb.append(getPortfolioName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>investorId</column-name><column-value><![CDATA[");
		sb.append(getInvestorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wealthAdvisorId</column-name><column-value><![CDATA[");
		sb.append(getWealthAdvisorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationshipManagerId</column-name><column-value><![CDATA[");
		sb.append(getRelationshipManagerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>institutionId</column-name><column-value><![CDATA[");
		sb.append(getInstitutionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trial</column-name><column-value><![CDATA[");
		sb.append(getTrial());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primary</column-name><column-value><![CDATA[");
		sb.append(getPrimary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>social</column-name><column-value><![CDATA[");
		sb.append(getSocial());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baseCurrency</column-name><column-value><![CDATA[");
		sb.append(getBaseCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Portfolio.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Portfolio.class
		};
	private long _portfolioId;
	private String _portfolioName;
	private long _investorId;
	private long _originalInvestorId;
	private boolean _setOriginalInvestorId;
	private long _wealthAdvisorId;
	private long _originalWealthAdvisorId;
	private boolean _setOriginalWealthAdvisorId;
	private long _relationshipManagerId;
	private long _originalRelationshipManagerId;
	private boolean _setOriginalRelationshipManagerId;
	private long _institutionId;
	private long _originalInstitutionId;
	private boolean _setOriginalInstitutionId;
	private boolean _trial;
	private boolean _primary;
	private boolean _social;
	private String _baseCurrency;
	private Date _createDate;
	private Date _modifiedDate;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private long _columnBitmask;
	private Portfolio _escapedModel;
}