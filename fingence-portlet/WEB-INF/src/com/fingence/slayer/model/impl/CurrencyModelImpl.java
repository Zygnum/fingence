/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.Currency;
import com.fingence.slayer.model.CurrencyModel;
import com.fingence.slayer.model.CurrencySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Currency service. Represents a row in the &quot;fing_Currency&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.CurrencyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CurrencyImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see CurrencyImpl
 * @see com.fingence.slayer.model.Currency
 * @see com.fingence.slayer.model.CurrencyModel
 * @generated
 */
@JSON(strict = true)
public class CurrencyModelImpl extends BaseModelImpl<Currency>
	implements CurrencyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a currency model instance should use the {@link com.fingence.slayer.model.Currency} interface instead.
	 */
	public static final String TABLE_NAME = "fing_Currency";
	public static final Object[][] TABLE_COLUMNS = {
			{ "currencyId", Types.BIGINT },
			{ "currencyCode", Types.VARCHAR },
			{ "currencyDesc", Types.VARCHAR },
			{ "conversion", Types.DOUBLE },
			{ "currencySymbol", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_Currency (currencyId LONG not null primary key,currencyCode VARCHAR(75) null,currencyDesc VARCHAR(75) null,conversion DOUBLE,currencySymbol VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table fing_Currency";
	public static final String ORDER_BY_JPQL = " ORDER BY currency.currencyCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_Currency.currencyCode ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.Currency"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.Currency"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fingence.slayer.model.Currency"),
			true);
	public static long CURRENCYCODE_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Currency toModel(CurrencySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Currency model = new CurrencyImpl();

		model.setCurrencyId(soapModel.getCurrencyId());
		model.setCurrencyCode(soapModel.getCurrencyCode());
		model.setCurrencyDesc(soapModel.getCurrencyDesc());
		model.setConversion(soapModel.getConversion());
		model.setCurrencySymbol(soapModel.getCurrencySymbol());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Currency> toModels(CurrencySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Currency> models = new ArrayList<Currency>(soapModels.length);

		for (CurrencySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.Currency"));

	public CurrencyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _currencyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCurrencyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _currencyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Currency.class;
	}

	@Override
	public String getModelClassName() {
		return Currency.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("currencyId", getCurrencyId());
		attributes.put("currencyCode", getCurrencyCode());
		attributes.put("currencyDesc", getCurrencyDesc());
		attributes.put("conversion", getConversion());
		attributes.put("currencySymbol", getCurrencySymbol());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long currencyId = (Long)attributes.get("currencyId");

		if (currencyId != null) {
			setCurrencyId(currencyId);
		}

		String currencyCode = (String)attributes.get("currencyCode");

		if (currencyCode != null) {
			setCurrencyCode(currencyCode);
		}

		String currencyDesc = (String)attributes.get("currencyDesc");

		if (currencyDesc != null) {
			setCurrencyDesc(currencyDesc);
		}

		Double conversion = (Double)attributes.get("conversion");

		if (conversion != null) {
			setConversion(conversion);
		}

		String currencySymbol = (String)attributes.get("currencySymbol");

		if (currencySymbol != null) {
			setCurrencySymbol(currencySymbol);
		}
	}

	@JSON
	@Override
	public long getCurrencyId() {
		return _currencyId;
	}

	@Override
	public void setCurrencyId(long currencyId) {
		_currencyId = currencyId;
	}

	@JSON
	@Override
	public String getCurrencyCode() {
		if (_currencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _currencyCode;
		}
	}

	@Override
	public void setCurrencyCode(String currencyCode) {
		_columnBitmask = -1L;

		if (_originalCurrencyCode == null) {
			_originalCurrencyCode = _currencyCode;
		}

		_currencyCode = currencyCode;
	}

	public String getOriginalCurrencyCode() {
		return GetterUtil.getString(_originalCurrencyCode);
	}

	@JSON
	@Override
	public String getCurrencyDesc() {
		if (_currencyDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _currencyDesc;
		}
	}

	@Override
	public void setCurrencyDesc(String currencyDesc) {
		_currencyDesc = currencyDesc;
	}

	@JSON
	@Override
	public double getConversion() {
		return _conversion;
	}

	@Override
	public void setConversion(double conversion) {
		_conversion = conversion;
	}

	@JSON
	@Override
	public String getCurrencySymbol() {
		if (_currencySymbol == null) {
			return StringPool.BLANK;
		}
		else {
			return _currencySymbol;
		}
	}

	@Override
	public void setCurrencySymbol(String currencySymbol) {
		_currencySymbol = currencySymbol;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Currency.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Currency toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Currency)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CurrencyImpl currencyImpl = new CurrencyImpl();

		currencyImpl.setCurrencyId(getCurrencyId());
		currencyImpl.setCurrencyCode(getCurrencyCode());
		currencyImpl.setCurrencyDesc(getCurrencyDesc());
		currencyImpl.setConversion(getConversion());
		currencyImpl.setCurrencySymbol(getCurrencySymbol());

		currencyImpl.resetOriginalValues();

		return currencyImpl;
	}

	@Override
	public int compareTo(Currency currency) {
		int value = 0;

		value = getCurrencyCode().compareTo(currency.getCurrencyCode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Currency)) {
			return false;
		}

		Currency currency = (Currency)obj;

		long primaryKey = currency.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CurrencyModelImpl currencyModelImpl = this;

		currencyModelImpl._originalCurrencyCode = currencyModelImpl._currencyCode;

		currencyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Currency> toCacheModel() {
		CurrencyCacheModel currencyCacheModel = new CurrencyCacheModel();

		currencyCacheModel.currencyId = getCurrencyId();

		currencyCacheModel.currencyCode = getCurrencyCode();

		String currencyCode = currencyCacheModel.currencyCode;

		if ((currencyCode != null) && (currencyCode.length() == 0)) {
			currencyCacheModel.currencyCode = null;
		}

		currencyCacheModel.currencyDesc = getCurrencyDesc();

		String currencyDesc = currencyCacheModel.currencyDesc;

		if ((currencyDesc != null) && (currencyDesc.length() == 0)) {
			currencyCacheModel.currencyDesc = null;
		}

		currencyCacheModel.conversion = getConversion();

		currencyCacheModel.currencySymbol = getCurrencySymbol();

		String currencySymbol = currencyCacheModel.currencySymbol;

		if ((currencySymbol != null) && (currencySymbol.length() == 0)) {
			currencyCacheModel.currencySymbol = null;
		}

		return currencyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{currencyId=");
		sb.append(getCurrencyId());
		sb.append(", currencyCode=");
		sb.append(getCurrencyCode());
		sb.append(", currencyDesc=");
		sb.append(getCurrencyDesc());
		sb.append(", conversion=");
		sb.append(getConversion());
		sb.append(", currencySymbol=");
		sb.append(getCurrencySymbol());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.Currency");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>currencyId</column-name><column-value><![CDATA[");
		sb.append(getCurrencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencyCode</column-name><column-value><![CDATA[");
		sb.append(getCurrencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencyDesc</column-name><column-value><![CDATA[");
		sb.append(getCurrencyDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conversion</column-name><column-value><![CDATA[");
		sb.append(getConversion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencySymbol</column-name><column-value><![CDATA[");
		sb.append(getCurrencySymbol());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Currency.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Currency.class
		};
	private long _currencyId;
	private String _currencyCode;
	private String _originalCurrencyCode;
	private String _currencyDesc;
	private double _conversion;
	private String _currencySymbol;
	private long _columnBitmask;
	private Currency _escapedModel;
}