/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fingence.slayer.model.impl;

import com.fingence.slayer.model.MutualFund;
import com.fingence.slayer.model.MutualFundModel;
import com.fingence.slayer.model.MutualFundSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MutualFund service. Represents a row in the &quot;fing_MutualFund&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fingence.slayer.model.MutualFundModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MutualFundImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see MutualFundImpl
 * @see com.fingence.slayer.model.MutualFund
 * @see com.fingence.slayer.model.MutualFundModel
 * @generated
 */
@JSON(strict = true)
public class MutualFundModelImpl extends BaseModelImpl<MutualFund>
	implements MutualFundModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mutual fund model instance should use the {@link com.fingence.slayer.model.MutualFund} interface instead.
	 */
	public static final String TABLE_NAME = "fing_MutualFund";
	public static final Object[][] TABLE_COLUMNS = {
			{ "assetId", Types.BIGINT },
			{ "fund_total_assets", Types.DOUBLE },
			{ "fund_asset_class_focus", Types.VARCHAR },
			{ "fund_geo_focus", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table fing_MutualFund (assetId LONG not null primary key,fund_total_assets DOUBLE,fund_asset_class_focus VARCHAR(75) null,fund_geo_focus VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table fing_MutualFund";
	public static final String ORDER_BY_JPQL = " ORDER BY mutualFund.assetId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fing_MutualFund.assetId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fingence.slayer.model.MutualFund"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fingence.slayer.model.MutualFund"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MutualFund toModel(MutualFundSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MutualFund model = new MutualFundImpl();

		model.setAssetId(soapModel.getAssetId());
		model.setFund_total_assets(soapModel.getFund_total_assets());
		model.setFund_asset_class_focus(soapModel.getFund_asset_class_focus());
		model.setFund_geo_focus(soapModel.getFund_geo_focus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MutualFund> toModels(MutualFundSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MutualFund> models = new ArrayList<MutualFund>(soapModels.length);

		for (MutualFundSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fingence.slayer.model.MutualFund"));

	public MutualFundModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _assetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAssetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _assetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MutualFund.class;
	}

	@Override
	public String getModelClassName() {
		return MutualFund.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("assetId", getAssetId());
		attributes.put("fund_total_assets", getFund_total_assets());
		attributes.put("fund_asset_class_focus", getFund_asset_class_focus());
		attributes.put("fund_geo_focus", getFund_geo_focus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long assetId = (Long)attributes.get("assetId");

		if (assetId != null) {
			setAssetId(assetId);
		}

		Double fund_total_assets = (Double)attributes.get("fund_total_assets");

		if (fund_total_assets != null) {
			setFund_total_assets(fund_total_assets);
		}

		String fund_asset_class_focus = (String)attributes.get(
				"fund_asset_class_focus");

		if (fund_asset_class_focus != null) {
			setFund_asset_class_focus(fund_asset_class_focus);
		}

		String fund_geo_focus = (String)attributes.get("fund_geo_focus");

		if (fund_geo_focus != null) {
			setFund_geo_focus(fund_geo_focus);
		}
	}

	@JSON
	@Override
	public long getAssetId() {
		return _assetId;
	}

	@Override
	public void setAssetId(long assetId) {
		_assetId = assetId;
	}

	@JSON
	@Override
	public double getFund_total_assets() {
		return _fund_total_assets;
	}

	@Override
	public void setFund_total_assets(double fund_total_assets) {
		_fund_total_assets = fund_total_assets;
	}

	@JSON
	@Override
	public String getFund_asset_class_focus() {
		if (_fund_asset_class_focus == null) {
			return StringPool.BLANK;
		}
		else {
			return _fund_asset_class_focus;
		}
	}

	@Override
	public void setFund_asset_class_focus(String fund_asset_class_focus) {
		_fund_asset_class_focus = fund_asset_class_focus;
	}

	@JSON
	@Override
	public String getFund_geo_focus() {
		if (_fund_geo_focus == null) {
			return StringPool.BLANK;
		}
		else {
			return _fund_geo_focus;
		}
	}

	@Override
	public void setFund_geo_focus(String fund_geo_focus) {
		_fund_geo_focus = fund_geo_focus;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MutualFund.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MutualFund toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MutualFund)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MutualFundImpl mutualFundImpl = new MutualFundImpl();

		mutualFundImpl.setAssetId(getAssetId());
		mutualFundImpl.setFund_total_assets(getFund_total_assets());
		mutualFundImpl.setFund_asset_class_focus(getFund_asset_class_focus());
		mutualFundImpl.setFund_geo_focus(getFund_geo_focus());

		mutualFundImpl.resetOriginalValues();

		return mutualFundImpl;
	}

	@Override
	public int compareTo(MutualFund mutualFund) {
		long primaryKey = mutualFund.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MutualFund)) {
			return false;
		}

		MutualFund mutualFund = (MutualFund)obj;

		long primaryKey = mutualFund.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MutualFund> toCacheModel() {
		MutualFundCacheModel mutualFundCacheModel = new MutualFundCacheModel();

		mutualFundCacheModel.assetId = getAssetId();

		mutualFundCacheModel.fund_total_assets = getFund_total_assets();

		mutualFundCacheModel.fund_asset_class_focus = getFund_asset_class_focus();

		String fund_asset_class_focus = mutualFundCacheModel.fund_asset_class_focus;

		if ((fund_asset_class_focus != null) &&
				(fund_asset_class_focus.length() == 0)) {
			mutualFundCacheModel.fund_asset_class_focus = null;
		}

		mutualFundCacheModel.fund_geo_focus = getFund_geo_focus();

		String fund_geo_focus = mutualFundCacheModel.fund_geo_focus;

		if ((fund_geo_focus != null) && (fund_geo_focus.length() == 0)) {
			mutualFundCacheModel.fund_geo_focus = null;
		}

		return mutualFundCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{assetId=");
		sb.append(getAssetId());
		sb.append(", fund_total_assets=");
		sb.append(getFund_total_assets());
		sb.append(", fund_asset_class_focus=");
		sb.append(getFund_asset_class_focus());
		sb.append(", fund_geo_focus=");
		sb.append(getFund_geo_focus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.fingence.slayer.model.MutualFund");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>assetId</column-name><column-value><![CDATA[");
		sb.append(getAssetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fund_total_assets</column-name><column-value><![CDATA[");
		sb.append(getFund_total_assets());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fund_asset_class_focus</column-name><column-value><![CDATA[");
		sb.append(getFund_asset_class_focus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fund_geo_focus</column-name><column-value><![CDATA[");
		sb.append(getFund_geo_focus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MutualFund.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MutualFund.class
		};
	private long _assetId;
	private double _fund_total_assets;
	private String _fund_asset_class_focus;
	private String _fund_geo_focus;
	private MutualFund _escapedModel;
}